/* -*- buffer-read-only: t -*- vi: set ro: */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

/* Implementation : GUILE */

extern "C" {

extern void
SWIG_init (void)
;

}

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif

/* -*- c -*-
 * -----------------------------------------------------------------------
 * swig_lib/guile/guiledec.swg
 * Copyright (C) 2000 Matthias Koeppe
 *
 * Guile configuration file -- declarations
 * ----------------------------------------------------------------------- */

#define SWIGGUILE
#include "guile/gh.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

#if defined(SWIG_NOINCLUDE)
#	define SWIGSTATIC
#elif defined(SWIG_GLOBAL)
#	define SWIGSTATIC
#else
#	define SWIGSTATIC static
#endif

#define GH_NOT_PASSED    SCM_UNDEFINED
#define GH_UNSPECIFIED   SCM_UNSPECIFIED

#define SWIG_APPEND_VALUE(object)						\
    if (gswig_result == GH_UNSPECIFIED)						\
        gswig_result = object;							\
    else {									\
        if (!gswig_list_p) {							\
	    gswig_list_p = 1;							\
	    gswig_result = gh_list(gswig_result, object, GH_NOT_PASSED);	\
        }									\
        else									\
            gswig_result = gh_append2(gswig_result,				\
                                      gh_list(object, GH_NOT_PASSED));		\
    }

#define GUILE_APPEND_RESULT SWIG_APPEND_VALUE
  
/* scm_values was implemented on C level in 1.4.1, and the prototype
   is not included in libguile.h, so play safe and lookup `values'... */
#define GUILE_MAYBE_VALUES						\
    if (gswig_list_p)							\
        gswig_result = gh_apply(gh_lookup("values"), gswig_result);
    
#define GUILE_MAYBE_VECTOR				\
    if (gswig_list_p)					\
        gswig_result = gh_list_to_vector(gswig_result);

static char *
SWIG_scm2str (SCM s)
{
  return gh_scm2newstr (s, NULL);
}

#define GSWIG_scm2str SWIG_scm2str

/* SCM_CHAR and SCM_CHARP were introduced in Guile 1.4; the following is for
   1.3.4 compatibility. */
#ifndef SCM_CHAR
#  define SCM_CHAR SCM_ICHR
#endif
#ifndef SCM_CHARP
#  define SCM_CHARP SCM_ICHRP
#endif

/* This function replaces gh_scm2char, which is broken in Guile 1.4 */
static char
GSWIG_scm2char (SCM s)
{
  if (SCM_CHARP(s)) return SCM_CHAR(s);
  scm_wrong_type_arg(NULL, 0, s);
}
#define gh_scm2char GSWIG_scm2char

/* More 1.3.4 compatibility */
#ifndef SCM_INPUT_PORT_P
#  define SCM_INPUT_PORT_P SCM_INPORTP
#  define SCM_OUTPUT_PORT_P SCM_OUTPORTP
#endif

/* Type system */

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct SwigPtrType SwigPtrType;

typedef struct swig_type_info {
  const char  *name;
  swig_converter_func converter;
  const char  *str;
  void        *clientdata;
  size_t tag;
  swig_dycast_func        dcast;
} swig_type_info;

SWIGSTATIC void
SWIG_Guile_RegisterTypes (swig_type_info **table,
			  swig_type_info **init);

/* Register a new type-mapping with the type-checker.  origtype is the
   original datatype and newtype is an equivalent type.  cast is optional
   pointer to a function to cast pointer values between types (this is
   typically used to cast pointers from derived classes to base classes in
   C++).  */

SWIGSTATIC void
SWIG_RegisterMapping (const char *origtype, const char *newtype,
                      swig_converter_func cast);


/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGSTATIC swig_type_info * 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr);

/* Register SWIG smobs with Guile.  */
SWIGSTATIC void
SWIG_Guile_Init();

/* Initialization function for this SWIG module; actually renamed by a
   #define */
/* extern void SWIG_init(); */

/* Get a pointer value from a smob.  If there is a type-mismatch,
   return nonzero; on success, return 0.  */
SWIGSTATIC int
SWIG_Guile_GetPtr (SCM s, void **result, swig_type_info *type);

/* Get a pointer value from a smob.  If there is a type-mismatch,
   signal a wrong-type-arg error for the given argument number. */
SWIGSTATIC void *
SWIG_Guile_MustGetPtr (SCM s, swig_type_info *type,
		       int argnum, const char *func_name);

/* Make a smob from a pointer and typeinfo.  */
SWIGSTATIC SCM
SWIG_Guile_MakePtr (void *ptr, swig_type_info *type);

/* Get arguments from an argument list */
SWIGSTATIC int
SWIG_Guile_GetArgs (SCM *dest, SCM rest,
		    int reqargs, int optargs,
		    const char *procname);

typedef SCM (*swig_guile_proc)();

#ifdef __cplusplus
}
#endif

/* guiledec.swg ends here */

/* -*- c -*-
 * -----------------------------------------------------------------------
 * swig_lib/guile/guile.swg
 *
 * Guile configuration file.
 * ----------------------------------------------------------------------- */

/* SWIG pointer structure */

#ifdef __cplusplus
extern "C" {
#endif

struct SwigCast {
  unsigned short      type;		  /* Index into SwigPtrTbl          */
  void               *(*cast)(void *);    /* Pointer casting function       */
  struct SwigCast    *next;		  /* Linked list pointer            */
};

struct SwigPtrType {
  const char         *name;               /* Datatype name                  */
  const char	     *prettyname;         /* Pretty datatype name           */
  unsigned short      tag;		  /* Index in SwigPtrTable          */
  struct SwigCast    *cast;		  /* List of compatible types       */
};

/* Some variables  */

static int SwigPtrMax  = 64;            /* Max entries that can be held */
                                        /* (may be adjusted dynamically) */
static int SwigPtrN    = 0;             /* Current number of entries */
static int SwigPtrSort = 0;             /* Status flag indicating sort */

/* Pointer table */
static SwigPtrType *SwigPtrList = 0;    /* Table containing types and
					   equivalences; items will only
                                           be appended */
static size_t *SwigPtrTbl = 0;          /* Sorted indirect table; items will
					   be inserted */

/* Sort comparison function */
static int
swigsort (const void *data1, const void *data2)
{
  size_t index1 = * (size_t *) data1;
  size_t index2 = * (size_t *) data2;
  return strcmp(SwigPtrList[index1].name, SwigPtrList[index2].name);
}

/* Register a new datatype with the type-checker */
SWIGSTATIC size_t
SWIG_RegisterType (const char *type, const char *prettyname)
{
  int i;

  /* Allocate the pointer table if necessary */
  if (!SwigPtrList) {
    SwigPtrList = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrTbl = (size_t *) malloc(SwigPtrMax*sizeof(size_t));
    SwigPtrN = 0;
  }
  /* Grow the table if necessary */
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrList = (SwigPtrType *) realloc((char *) SwigPtrList,
					  SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrTbl = (size_t *) realloc((char *) SwigPtrTbl,
				    SwigPtrMax*sizeof(size_t));
  }
  /* Look up type */
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrList[i].name,type) == 0) {
      if (prettyname!=NULL)
	SwigPtrList[i].prettyname = prettyname;
      return i;
    }
  {
    struct SwigPtrType *t;
    size_t tag;
#if 0
    fprintf(stderr, "New type: %s\n", type);
#endif
    tag = SwigPtrTbl[SwigPtrN] = SwigPtrN;
    t = &SwigPtrList[tag];
    t->name = type;
    t->prettyname = prettyname;
    t->tag = SwigPtrN;
    t->cast = NULL;
    SwigPtrN++;
    SwigPtrSort = 0; 
    return tag;
  }
}

/* Register two data types and their mapping with the type checker. */
SWIGSTATIC void
SWIG_RegisterMapping (const char *origtype, const char *newtype,
		      swig_converter_func cast)
{
  size_t t = SWIG_RegisterType(origtype, NULL);

  if (newtype!=NULL) {
    size_t t1 = SWIG_RegisterType(newtype, NULL);
    struct SwigCast *c;
    /* Check for existing cast */
    for (c = SwigPtrList[t].cast; c && c->type!=t1; c=c->next) /* nothing */;
    if (c) {
      if (cast) c->cast = cast;
    }
    else {
      c = (struct SwigCast *) malloc(sizeof(struct SwigCast));
      c->type = t1;
      c->cast = cast;
      c->next = SwigPtrList[t].cast;
      SwigPtrList[t].cast = c;
    }
  }
}

/* Sort table */

static void
SWIG_SortTable (void)
{
  qsort ((void *) SwigPtrTbl, SwigPtrN, sizeof(size_t), swigsort);
  /* Indicate that everything is sorted */
  SwigPtrSort = 1;
}

/* Look up pointer-type entry in table */

static int
swigcmp (const void *key, const void *data)
{
  char *k = (char *) key;
  size_t index = *(size_t *)data;
  return strcmp(k, SwigPtrList[index].name);
}

static SwigPtrType *
SWIG_GetPtrType (const char *_t)
{
  size_t *result;
  if (!SwigPtrSort) SWIG_SortTable();
  result = (size_t *) bsearch(_t, SwigPtrTbl, SwigPtrN, sizeof(size_t), swigcmp);
  if (result!=NULL) return SwigPtrList+*result;
  else return NULL;
}

/* Cast a pointer if possible; returns 1 if successful */

static int
SWIG_Cast (void *source, size_t source_type,
	   void **ptr, size_t dest_type)
{
  if (dest_type != source_type) {
    /* We have a type mismatch.  Will have to look through our type
       mapping table to figure out whether or not we can accept this
       datatype.  */
    struct SwigCast *c;
    for (c = SwigPtrList[dest_type].cast;
	 c && c->type!=source_type; c = c->next) /* nothing */;
    if (c) {
      /* Get pointer value. */
      if (c->cast) *ptr = (*(c->cast))(source);
      else *ptr = source;
      return 1;
    }
    /* Didn't find any sort of match for this data.
       Get the pointer value and return false.  */
    *ptr = source;
    return 0;
  } else {
    /* Found a match on the first try.  Return pointer value.  */
    *ptr = source;
    return 1;
  }
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGSTATIC swig_type_info * 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Function for getting a pointer value */

static unsigned long swig_tag = 0;

SWIGSTATIC SCM
SWIG_Guile_MakePtr (void *ptr, swig_type_info *type)
{
  if (ptr==NULL) return SCM_EOL;
  SCM_RETURN_NEWSMOB((((unsigned long)type->tag << 16) | swig_tag),
		     ptr);
}

/* Return 0 if successful. */
SWIGSTATIC int
SWIG_Guile_GetPtr(SCM s, void **result, swig_type_info *type)
{
  if (SCM_NULLP(s)) {
    *result = NULL;
    return 0;
  }
  else if (SCM_NIMP(s)
	   && (unsigned long) SCM_TYP16(s) == swig_tag) {
    if (type) 
      return !SWIG_Cast((void *) SCM_CDR(s),
			(long) SCM_CAR(s) >> 16,
			result, type->tag);
    else {
      *result = (void *) SCM_CDR(s);
      return 0;
    }
  }
  return 1;
}

SWIGSTATIC void *
SWIG_Guile_MustGetPtr (SCM s, swig_type_info *type,
		       int argnum, const char *func_name)
{
  void *result;
  if (SWIG_Guile_GetPtr(s, &result, type)) {
    /* type mismatch */
    scm_wrong_type_arg((char *) func_name, argnum, s);
  }
  return result;
}

/* Init */

static int
print_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  scm_puts((char *) "#<swig ", port);
  if (SwigPtrList[(long) SCM_CAR(swig_smob) >> 16].prettyname != NULL)
    scm_puts((char*) SwigPtrList[(long) SCM_CAR(swig_smob) >> 16].prettyname, port);
  else scm_puts((char*) SwigPtrList[(long) SCM_CAR(swig_smob) >> 16].name, port);
  scm_puts((char *) " ", port);
  scm_intprint((long) SCM_CDR(swig_smob), 16, port);
  scm_puts((char *) ">", port);
  /* non-zero means success */
  return 1;
}

static SCM
equalp_swig (SCM A, SCM B)
{
  if (SCM_CAR(A) == SCM_CAR(B)
      && SCM_CDR(A) == SCM_CDR(B))
    return SCM_BOOL_T;
  else return SCM_BOOL_F;
}

SWIGSTATIC void
SWIG_Guile_Init (void)
{
  if (swig_tag == 0) {
    swig_tag = scm_make_smob_type_mfpe((char *) "swig", 0, NULL, NULL,
				       print_swig, equalp_swig);
  }
}

/* Convert datatype table */

SWIGSTATIC
void SWIG_Guile_RegisterTypes(swig_type_info **table,
			      swig_type_info **init)
{
  for (; *init; table++, init++) {
    swig_type_info *type = *table = *init;
    const char *origname = type->name;
    /* Register datatype itself and store pointer back */
    type->tag = SWIG_RegisterType(origname, type->str);
    /* Register compatible types */
    for (type++; type->name; type++)
      SWIG_RegisterMapping(origname, type->name, type->converter);
  }    
}

SWIGSTATIC int
SWIG_Guile_GetArgs (SCM *dest, SCM rest,
		    int reqargs, int optargs,
		    const char *procname)
{
  int i;
  int num_args_passed = 0;
  for (i = 0; i<reqargs; i++) {
    if (!SCM_CONSP(rest))
      scm_wrong_num_args(gh_str02scm((char *) procname));
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (i = 0; i<optargs && SCM_CONSP(rest); i++) {
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (; i<optargs; i++)
    *dest++ = GH_NOT_PASSED;
  if (!SCM_NULLP(rest))
    scm_wrong_num_args(gh_str02scm((char *) procname));
  return num_args_passed;
}

#ifdef __cplusplus
}
#endif

/* guile.swg ends here */


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_Schema swig_types[0] 
#define  SWIGTYPE_p_Datum swig_types[1] 
#define  SWIGTYPE_p_IntDatum swig_types[2] 
#define  SWIGTYPE_p_CursorRow swig_types[3] 
#define  SWIGTYPE_p_TypeMap swig_types[4] 
#define  SWIGTYPE_p_Row swig_types[5] 
#define  SWIGTYPE_p_GreenEnv swig_types[6] 
#define  SWIGTYPE_p_GreenDb swig_types[7] 
#define  SWIGTYPE_p_StrDatum swig_types[8] 
#define  SWIGTYPE_p_Cursor swig_types[9] 
#define  SWIGTYPE_p_Table swig_types[10] 
static swig_type_info *swig_types[12];

/* -------- TYPES TABLE (END) -------- */


#include <db_cxx.h>
#include "greendb/greendb.hh"
#include "greendb/datum.hh"
#include "greendb/strdatum.hh"
#include "greendb/greenenv.hh"
#include "greendb/row.hh"
#include "greendb/table.hh"
#include "greendb/cursor.hh"
#include "greendb/typemap.hh"
#include "greendb/schema.hh"

static int gswig_const_TypeMap_UNDEFINED = TypeMap::UNDEFINED;
static int gswig_const_TypeMap_USER = TypeMap::USER;
static int gswig_const_TypeMap_STRING = TypeMap::STRING;
static int gswig_const_TypeMap_WSTRING = TypeMap::WSTRING;
static int gswig_const_TypeMap_INT = TypeMap::INT;
static int gswig_const_TypeMap_SHORT = TypeMap::SHORT;
static int gswig_const_TypeMap_LONG = TypeMap::LONG;
static int gswig_const_TypeMap_DOUBLE = TypeMap::DOUBLE;
static int gswig_const_TypeMap_UINT = TypeMap::UINT;
static int gswig_const_TypeMap_USHORT = TypeMap::USHORT;
static int gswig_const_TypeMap_ULONG = TypeMap::ULONG;
static int gswig_const_TypeMap_CHAR = TypeMap::CHAR;
static int gswig_const_TypeMap_WCHAR = TypeMap::WCHAR;
static int gswig_const_TypeMap_BOOL = TypeMap::BOOL;
static SCM
_wrap_new_GreenDb (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "new-GreenDb"
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    char *arg2 ;
    char *arg3 ;
    GreenDb *result;
    int must_free2 = 0 ;
    int must_free3 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenEnv))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    {
        arg3 = SWIG_scm2str(s_2);
        must_free3 = 1;
    }
    gh_defer_ints();
    result = (GreenDb *)new GreenDb(arg1,(char const *)arg2,(char const *)arg3);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_GreenDb);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    if (must_free3 && arg3) scm_must_free(arg3);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_GreenDb (SCM s_0)
{
    #define FUNC_NAME "delete-GreenDb"
    GreenDb *arg1 = (GreenDb *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
    #define FUNC_NAME "GreenDb-open"
    GreenDb *arg1 = (GreenDb *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    {
        arg3 = gh_scm2int(s_2);
    }
    {
        arg4 = gh_scm2int(s_3);
    }
    gh_defer_ints();
    (arg1)->open(arg2,arg3,arg4);
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_unknown (SCM s_0)
{
    #define FUNC_NAME "GreenDb-open-unknown"
    GreenDb *arg1 = (GreenDb *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->open_unknown();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_queue (SCM s_0)
{
    #define FUNC_NAME "GreenDb-open-queue"
    GreenDb *arg1 = (GreenDb *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->open_queue();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_recno (SCM s_0)
{
    #define FUNC_NAME "GreenDb-open-recno"
    GreenDb *arg1 = (GreenDb *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->open_recno();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_hash (SCM s_0)
{
    #define FUNC_NAME "GreenDb-open-hash"
    GreenDb *arg1 = (GreenDb *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->open_hash();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_btree (SCM s_0)
{
    #define FUNC_NAME "GreenDb-open-btree"
    GreenDb *arg1 = (GreenDb *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->open_btree();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_dbfile (SCM s_0)
{
    #define FUNC_NAME "GreenDb-dbfile"
    GreenDb *arg1 = (GreenDb *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)((GreenDb const *)arg1)->dbfile();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_name (SCM s_0)
{
    #define FUNC_NAME "GreenDb-name"
    GreenDb *arg1 = (GreenDb *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)((GreenDb const *)arg1)->name();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_put (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "GreenDb-put"
    GreenDb *arg1 = (GreenDb *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_Datum)!=0 || arg2 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    (arg1)->put(*arg2,*arg3);
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_fetch (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "GreenDb-fetch"
    GreenDb *arg1 = (GreenDb *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_Datum)!=0 || arg2 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    result = (int)(arg1)->fetch(*arg2,*arg3);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_cursor (SCM s_0)
{
    #define FUNC_NAME "GreenDb-cursor"
    GreenDb *arg1 = (GreenDb *) 0 ;
    Cursor *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (Cursor *)(arg1)->cursor();
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Cursor);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenDb_close (SCM s_0)
{
    #define FUNC_NAME "GreenDb-close"
    GreenDb *arg1 = (GreenDb *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenDb))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->close();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_new_GreenEnv (SCM s_0)
{
    #define FUNC_NAME "new-GreenEnv"
    char *arg1 ;
    GreenEnv *result;
    int must_free1 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = SWIG_scm2str(s_0);
        must_free1 = 1;
    }
    gh_defer_ints();
    result = (GreenEnv *)new GreenEnv((char const *)arg1);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_GreenEnv);
    }
    if (must_free1 && arg1) scm_must_free(arg1);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_GreenEnv (SCM s_0)
{
    #define FUNC_NAME "delete-GreenEnv"
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenEnv))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenEnv_open (SCM s_0)
{
    #define FUNC_NAME "GreenEnv-open"
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenEnv))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->open();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenEnv_close (SCM s_0)
{
    #define FUNC_NAME "GreenEnv-close"
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenEnv))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->close();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_GreenEnv_home (SCM s_0)
{
    #define FUNC_NAME "GreenEnv-home"
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_GreenEnv))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)(arg1)->home();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_new_Datum ()
{
    #define FUNC_NAME "new-Datum"
    Datum *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    gh_defer_ints();
    result = (Datum *)new Datum();
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Datum);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_Datum (SCM s_0)
{
    #define FUNC_NAME "delete-Datum"
    Datum *arg1 = (Datum *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Datum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_new_StrDatum (SCM s_0)
{
    #define FUNC_NAME "new-StrDatum"
    char *arg1 ;
    StrDatum *result;
    int must_free1 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = SWIG_scm2str(s_0);
        must_free1 = 1;
    }
    gh_defer_ints();
    result = (StrDatum *)new StrDatum(arg1);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_StrDatum);
    }
    if (must_free1 && arg1) scm_must_free(arg1);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_StrDatum_type_name (SCM s_0)
{
    #define FUNC_NAME "StrDatum-type-name"
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_StrDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)((StrDatum const *)arg1)->type_name();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_StrDatum (SCM s_0)
{
    #define FUNC_NAME "delete-StrDatum"
    StrDatum *arg1 = (StrDatum *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_StrDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_StrDatum_repr (SCM s_0)
{
    #define FUNC_NAME "StrDatum-repr"
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_StrDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)((StrDatum const *)arg1)->repr();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_StrDatum_value (SCM s_0)
{
    #define FUNC_NAME "StrDatum-value"
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_StrDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)(arg1)->value();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_StrDatum_set_value (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "StrDatum-set-value"
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *arg2 ;
    char *result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_StrDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (char *)(arg1)->set_value(arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_new_IntDatum (SCM s_0)
{
    #define FUNC_NAME "new-IntDatum"
    int arg1 ;
    IntDatum *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = gh_scm2int(s_0);
    }
    gh_defer_ints();
    result = (IntDatum *)new IntDatum(arg1);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_IntDatum);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_IntDatum_type_name (SCM s_0)
{
    #define FUNC_NAME "IntDatum-type-name"
    IntDatum *arg1 = (IntDatum *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_IntDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)((IntDatum const *)arg1)->type_name();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_IntDatum (SCM s_0)
{
    #define FUNC_NAME "delete-IntDatum"
    IntDatum *arg1 = (IntDatum *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_IntDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_IntDatum_repr (SCM s_0)
{
    #define FUNC_NAME "IntDatum-repr"
    IntDatum *arg1 = (IntDatum *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_IntDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)((IntDatum const *)arg1)->repr();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_IntDatum_value (SCM s_0)
{
    #define FUNC_NAME "IntDatum-value"
    IntDatum *arg1 = (IntDatum *) 0 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_IntDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (int)(arg1)->value();
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_IntDatum_set_value (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "IntDatum-set-value"
    IntDatum *arg1 = (IntDatum *) 0 ;
    int arg2 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_IntDatum))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    gh_defer_ints();
    result = (int)(arg1)->set_value(arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_Cursor (SCM s_0)
{
    #define FUNC_NAME "delete-Cursor"
    Cursor *arg1 = (Cursor *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Cursor))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Cursor_first (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Cursor-first"
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Cursor))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_Datum)!=0 || arg2 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    result = (int)(arg1)->first(*arg2,*arg3);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Cursor_last (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Cursor-last"
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Cursor))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_Datum)!=0 || arg2 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    result = (int)(arg1)->last(*arg2,*arg3);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Cursor_find (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Cursor-find"
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Cursor))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_Datum)!=0 || arg2 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    result = (int)(arg1)->find(*arg2,*arg3);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Cursor_next (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Cursor-next"
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Cursor))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_Datum)!=0 || arg2 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    result = (int)(arg1)->next(*arg2,*arg3);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Cursor_close (SCM s_0)
{
    #define FUNC_NAME "Cursor-close"
    Cursor *arg1 = (Cursor *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Cursor))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->close();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_new_Row (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "new-Row"
    Table *arg1 = (Table *) 0 ;
    size_t arg2 ;
    Row *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2long(s_1);
    }
    gh_defer_ints();
    result = (Row *)new Row(arg1,arg2);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Row);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_Row (SCM s_0)
{
    #define FUNC_NAME "delete-Row"
    Row *arg1 = (Row *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_close (SCM s_0)
{
    #define FUNC_NAME "Row-close"
    Row *arg1 = (Row *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->close();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_getpk (SCM s_0)
{
    #define FUNC_NAME "Row-getpk"
    Row *arg1 = (Row *) 0 ;
    Datum *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    {
        Datum &_result_ref = (arg1)->getpk();
        result = (Datum *) &_result_ref;
    }
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Datum);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_set_n (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Row-set-n"
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *arg3 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    (arg1)->set(arg2,*arg3);
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_set (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Row-set"
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    bool result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    result = (bool)(arg1)->set((char const *)arg2,*arg3);
    
    gh_allow_ints();
    {
        gswig_result = gh_bool2scm(result);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_from_string_n (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Row-from-string-n"
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    char *arg3 ;
    int must_free3 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    {
        arg3 = SWIG_scm2str(s_2);
        must_free3 = 1;
    }
    gh_defer_ints();
    (arg1)->from_string(arg2,(char const *)arg3);
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    if (must_free3 && arg3) scm_must_free(arg3);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_from_string (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Row-from-string"
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    char *arg3 ;
    int must_free2 = 0 ;
    int must_free3 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    {
        arg3 = SWIG_scm2str(s_2);
        must_free3 = 1;
    }
    gh_defer_ints();
    (arg1)->from_string((char const *)arg2,(char const *)arg3);
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    if (must_free2 && arg2) scm_must_free(arg2);
    if (must_free3 && arg3) scm_must_free(arg3);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_to_string_n (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Row-to-string-n"
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    gh_defer_ints();
    result = (char *)(arg1)->to_string(arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_to_string (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Row-to-string"
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    char *result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (char *)(arg1)->to_string((char const *)arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_get_column_n (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Row-get-column-n"
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    gh_defer_ints();
    result = (Datum *)(arg1)->get_column(arg2);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Datum);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_get_column (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Row-get-column"
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    Datum *result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (Datum *)(arg1)->get_column((char const *)arg2);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Datum);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_get_col_no (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Row-get-col-no"
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    int result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (int)(arg1)->get_col_no((char const *)arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_get_existing_column (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Row-get-existing-column"
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    gh_defer_ints();
    result = (Datum *)(arg1)->get_existing_column(arg2);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Datum);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Row_size (SCM s_0)
{
    #define FUNC_NAME "Row-size"
    Row *arg1 = (Row *) 0 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (int)(arg1)->size();
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_new_Table (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "new-Table"
    char *arg1 ;
    GreenEnv *arg2 = 0 ;
    Table *result;
    int must_free1 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        arg1 = SWIG_scm2str(s_0);
        must_free1 = 1;
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_GreenEnv)!=0 || arg2 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    gh_defer_ints();
    result = (Table *)new Table((char const *)arg1,*arg2);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Table);
    }
    if (must_free1 && arg1) scm_must_free(arg1);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_get_schema (SCM s_0)
{
    #define FUNC_NAME "Table-get-schema"
    Table *arg1 = (Table *) 0 ;
    Schema *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (Schema *)(arg1)->get_schema();
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Schema);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_close (SCM s_0)
{
    #define FUNC_NAME "Table-close"
    Table *arg1 = (Table *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    (arg1)->close();
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_Table (SCM s_0)
{
    #define FUNC_NAME "delete-Table"
    Table *arg1 = (Table *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_get_name (SCM s_0)
{
    #define FUNC_NAME "Table-get-name"
    Table *arg1 = (Table *) 0 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (char *)((Table const *)arg1)->get_name();
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_save (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Table-save"
    Table *arg1 = (Table *) 0 ;
    Row *arg2 = (Row *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_Row))
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    gh_defer_ints();
    (arg1)->save(arg2);
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_index (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
    #define FUNC_NAME "Table-index"
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    Datum *arg4 = 0 ;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    {
        if (SWIG_Guile_GetPtr(s_3, (void **) &arg4, SWIGTYPE_p_Datum)!=0 || arg4 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 4, s_3);
    }
    gh_defer_ints();
    (arg1)->index((char const *)arg2,*arg3,*arg4);
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_fetch (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Table-fetch"
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    Row *result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Datum)!=0 || arg3 == NULL)
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    gh_defer_ints();
    result = (Row *)(arg1)->fetch((char const *)arg2,*arg3);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Row);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_new_row (SCM s_0)
{
    #define FUNC_NAME "Table-new-row"
    Table *arg1 = (Table *) 0 ;
    Row *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (Row *)(arg1)->new_row();
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Row);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_cursor (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Table-cursor"
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Cursor *result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (Cursor *)(arg1)->cursor((char const *)arg2);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Cursor);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_first (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Table-first"
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    CursorRow *result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (CursorRow *)(arg1)->first((char const *)arg2);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_CursorRow);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_last (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Table-last"
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    CursorRow *result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (CursorRow *)(arg1)->last((char const *)arg2);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_CursorRow);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_next (SCM s_0, SCM s_1, SCM s_2)
{
    #define FUNC_NAME "Table-next"
    Table *arg1 = (Table *) 0 ;
    CursorRow *arg2 = (CursorRow *) 0 ;
    char *arg3 ;
    CursorRow *result;
    int must_free3 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        if (SWIG_Guile_GetPtr(s_1, (void **) &arg2, SWIGTYPE_p_CursorRow))
        scm_wrong_type_arg(FUNC_NAME, 2, s_1);
    }
    {
        arg3 = SWIG_scm2str(s_2);
        must_free3 = 1;
    }
    gh_defer_ints();
    result = (CursorRow *)(arg1)->next(arg2,(char const *)arg3);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_CursorRow);
    }
    if (must_free3 && arg3) scm_must_free(arg3);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Table_get_col_name (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Table-get-col-name"
    Table *arg1 = (Table *) 0 ;
    int arg2 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    gh_defer_ints();
    result = (char *)((Table const *)arg1)->get_col_name(arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Schema_add_column (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
    #define FUNC_NAME "Schema-add-column"
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int arg3 ;
    bool arg4 ;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Schema))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    {
        arg3 = gh_scm2int(s_2);
    }
    {
        arg4 = gh_scm2bool(s_3);
    }
    gh_defer_ints();
    (arg1)->add_column((char const *)arg2,arg3,arg4);
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Schema_get_type_n (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Schema-get-type-n"
    Schema *arg1 = (Schema *) 0 ;
    int arg2 ;
    int result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Schema))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    gh_defer_ints();
    result = (int)((Schema const *)arg1)->get_type(arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Schema_get_type (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Schema-get-type"
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Schema))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (int)((Schema const *)arg1)->get_type((char const *)arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Schema_get_col_no (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Schema-get-col-no"
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int result;
    int must_free2 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Schema))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = SWIG_scm2str(s_1);
        must_free2 = 1;
    }
    gh_defer_ints();
    result = (int)((Schema const *)arg1)->get_col_no((char const *)arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_int2scm(result);
    }
    if (must_free2 && arg2) scm_must_free(arg2);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Schema_get_name (SCM s_0, SCM s_1)
{
    #define FUNC_NAME "Schema-get-name"
    Schema *arg1 = (Schema *) 0 ;
    int arg2 ;
    char *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Schema))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2int(s_1);
    }
    gh_defer_ints();
    result = (char *)((Schema const *)arg1)->get_name(arg2);
    
    gh_allow_ints();
    {
        gswig_result = gh_str02scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_Schema_size (SCM s_0)
{
    #define FUNC_NAME "Schema-size"
    Schema *arg1 = (Schema *) 0 ;
    size_t result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Schema))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = ((Schema const *)arg1)->size();
    
    gh_allow_ints();
    {
        gswig_result = gh_long2scm(result);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_Schema (SCM s_0)
{
    #define FUNC_NAME "delete-Schema"
    Schema *arg1 = (Schema *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Schema))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_get_type_map ()
{
    #define FUNC_NAME "TypeMap-get-type-map"
    TypeMap *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    gh_defer_ints();
    result = (TypeMap *)TypeMap::get_type_map();
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_TypeMap);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_UNDEFINED(SCM s_0)
{
    #define FUNC_NAME "TypeMap-UNDEFINED"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_UNDEFINED);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_USER(SCM s_0)
{
    #define FUNC_NAME "TypeMap-USER"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_USER);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_STRING(SCM s_0)
{
    #define FUNC_NAME "TypeMap-STRING"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_STRING);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_WSTRING(SCM s_0)
{
    #define FUNC_NAME "TypeMap-WSTRING"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_WSTRING);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_INT(SCM s_0)
{
    #define FUNC_NAME "TypeMap-INT"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_INT);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_SHORT(SCM s_0)
{
    #define FUNC_NAME "TypeMap-SHORT"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_SHORT);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_LONG(SCM s_0)
{
    #define FUNC_NAME "TypeMap-LONG"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_LONG);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_DOUBLE(SCM s_0)
{
    #define FUNC_NAME "TypeMap-DOUBLE"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_DOUBLE);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_UINT(SCM s_0)
{
    #define FUNC_NAME "TypeMap-UINT"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_UINT);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_USHORT(SCM s_0)
{
    #define FUNC_NAME "TypeMap-USHORT"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_USHORT);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_ULONG(SCM s_0)
{
    #define FUNC_NAME "TypeMap-ULONG"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_ULONG);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_CHAR(SCM s_0)
{
    #define FUNC_NAME "TypeMap-CHAR"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_CHAR);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_WCHAR(SCM s_0)
{
    #define FUNC_NAME "TypeMap-WCHAR"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_WCHAR);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_TypeMap_BOOL(SCM s_0)
{
    #define FUNC_NAME "TypeMap-BOOL"
    SCM gswig_result;
    
    {
        gswig_result = gh_int2scm(gswig_const_TypeMap_BOOL);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_TypeMap (SCM s_0)
{
    #define FUNC_NAME "delete-TypeMap"
    TypeMap *arg1 = (TypeMap *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_TypeMap))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_new_CursorRow (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
    #define FUNC_NAME "new-CursorRow"
    Table *arg1 = (Table *) 0 ;
    size_t arg2 ;
    Cursor *arg3 = (Cursor *) 0 ;
    char *arg4 ;
    Datum *arg5 = (Datum *) 0 ;
    CursorRow *result;
    int must_free4 = 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_Table))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    {
        arg2 = gh_scm2long(s_1);
    }
    {
        if (SWIG_Guile_GetPtr(s_2, (void **) &arg3, SWIGTYPE_p_Cursor))
        scm_wrong_type_arg(FUNC_NAME, 3, s_2);
    }
    {
        arg4 = SWIG_scm2str(s_3);
        must_free4 = 1;
    }
    {
        if (SWIG_Guile_GetPtr(s_4, (void **) &arg5, SWIGTYPE_p_Datum))
        scm_wrong_type_arg(FUNC_NAME, 5, s_4);
    }
    gh_defer_ints();
    result = (CursorRow *)new CursorRow(arg1,arg2,arg3,(char const *)arg4,arg5);
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_CursorRow);
    }
    if (must_free4 && arg4) scm_must_free(arg4);
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_CursorRow_get_cursor (SCM s_0)
{
    #define FUNC_NAME "CursorRow-get-cursor"
    CursorRow *arg1 = (CursorRow *) 0 ;
    Cursor *result;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_CursorRow))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    result = (Cursor *)(arg1)->get_cursor();
    
    gh_allow_ints();
    {
        gswig_result = SWIG_Guile_MakePtr (result, SWIGTYPE_p_Cursor);
    }
    
    return gswig_result;
    #undef FUNC_NAME
}


static SCM
_wrap_delete_CursorRow (SCM s_0)
{
    #define FUNC_NAME "delete-CursorRow"
    CursorRow *arg1 = (CursorRow *) 0 ;
    SCM gswig_result;
    int gswig_list_p = 0;
    
    {
        if (SWIG_Guile_GetPtr(s_0, (void **) &arg1, SWIGTYPE_p_CursorRow))
        scm_wrong_type_arg(FUNC_NAME, 1, s_0);
    }
    gh_defer_ints();
    delete arg1;
    
    gh_allow_ints();
    gswig_result = GH_UNSPECIFIED;
    
    return gswig_result;
    #undef FUNC_NAME
}


#ifdef __cplusplus
extern "C" {
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_IntDatumTo_p_Datum(void *x) {
    return (void *)((Datum *)  ((IntDatum *) x));
}
static void *_p_StrDatumTo_p_Datum(void *x) {
    return (void *)((Datum *)  ((StrDatum *) x));
}
static void *_p_CursorRowTo_p_Row(void *x) {
    return (void *)((Row *)  ((CursorRow *) x));
}
static swig_type_info _swigt__p_Schema[] = {{"_p_Schema", 0, "Schema *", 0},{"_p_Schema"},{0}};
static swig_type_info _swigt__p_Datum[] = {{"_p_Datum", 0, "Datum *", 0},{"_p_Datum"},{"_p_IntDatum", _p_IntDatumTo_p_Datum},{"_p_StrDatum", _p_StrDatumTo_p_Datum},{0}};
static swig_type_info _swigt__p_IntDatum[] = {{"_p_IntDatum", 0, "IntDatum *", 0},{"_p_IntDatum"},{0}};
static swig_type_info _swigt__p_CursorRow[] = {{"_p_CursorRow", 0, "CursorRow *", 0},{"_p_CursorRow"},{0}};
static swig_type_info _swigt__p_TypeMap[] = {{"_p_TypeMap", 0, "TypeMap *", 0},{"_p_TypeMap"},{0}};
static swig_type_info _swigt__p_Row[] = {{"_p_Row", 0, "Row *", 0},{"_p_CursorRow", _p_CursorRowTo_p_Row},{"_p_Row"},{0}};
static swig_type_info _swigt__p_GreenEnv[] = {{"_p_GreenEnv", 0, "GreenEnv *", 0},{"_p_GreenEnv"},{0}};
static swig_type_info _swigt__p_GreenDb[] = {{"_p_GreenDb", 0, "GreenDb *", 0},{"_p_GreenDb"},{0}};
static swig_type_info _swigt__p_StrDatum[] = {{"_p_StrDatum", 0, "StrDatum *", 0},{"_p_StrDatum"},{0}};
static swig_type_info _swigt__p_Cursor[] = {{"_p_Cursor", 0, "Cursor *", 0},{"_p_Cursor"},{0}};
static swig_type_info _swigt__p_Table[] = {{"_p_Table", 0, "Table *", 0},{"_p_Table"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_Schema, 
_swigt__p_Datum, 
_swigt__p_IntDatum, 
_swigt__p_CursorRow, 
_swigt__p_TypeMap, 
_swigt__p_Row, 
_swigt__p_GreenEnv, 
_swigt__p_GreenDb, 
_swigt__p_StrDatum, 
_swigt__p_Cursor, 
_swigt__p_Table, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
extern void
SWIG_init (void)
{
    SWIG_Guile_Init();
    gh_new_procedure("new-GreenDb", (swig_guile_proc) _wrap_new_GreenDb, 3, 0, 0);
    gh_new_procedure("delete-GreenDb", (swig_guile_proc) _wrap_delete_GreenDb, 1, 0, 0);
    gh_new_procedure("GreenDb-open", (swig_guile_proc) _wrap_GreenDb_open, 4, 0, 0);
    gh_new_procedure("GreenDb-open-unknown", (swig_guile_proc) _wrap_GreenDb_open_unknown, 1, 0, 0);
    gh_new_procedure("GreenDb-open-queue", (swig_guile_proc) _wrap_GreenDb_open_queue, 1, 0, 0);
    gh_new_procedure("GreenDb-open-recno", (swig_guile_proc) _wrap_GreenDb_open_recno, 1, 0, 0);
    gh_new_procedure("GreenDb-open-hash", (swig_guile_proc) _wrap_GreenDb_open_hash, 1, 0, 0);
    gh_new_procedure("GreenDb-open-btree", (swig_guile_proc) _wrap_GreenDb_open_btree, 1, 0, 0);
    gh_new_procedure("GreenDb-dbfile", (swig_guile_proc) _wrap_GreenDb_dbfile, 1, 0, 0);
    gh_new_procedure("GreenDb-name", (swig_guile_proc) _wrap_GreenDb_name, 1, 0, 0);
    gh_new_procedure("GreenDb-put", (swig_guile_proc) _wrap_GreenDb_put, 3, 0, 0);
    gh_new_procedure("GreenDb-fetch", (swig_guile_proc) _wrap_GreenDb_fetch, 3, 0, 0);
    gh_new_procedure("GreenDb-cursor", (swig_guile_proc) _wrap_GreenDb_cursor, 1, 0, 0);
    gh_new_procedure("GreenDb-close", (swig_guile_proc) _wrap_GreenDb_close, 1, 0, 0);
    gh_new_procedure("new-GreenEnv", (swig_guile_proc) _wrap_new_GreenEnv, 1, 0, 0);
    gh_new_procedure("delete-GreenEnv", (swig_guile_proc) _wrap_delete_GreenEnv, 1, 0, 0);
    gh_new_procedure("GreenEnv-open", (swig_guile_proc) _wrap_GreenEnv_open, 1, 0, 0);
    gh_new_procedure("GreenEnv-close", (swig_guile_proc) _wrap_GreenEnv_close, 1, 0, 0);
    gh_new_procedure("GreenEnv-home", (swig_guile_proc) _wrap_GreenEnv_home, 1, 0, 0);
    gh_new_procedure("new-Datum", (swig_guile_proc) _wrap_new_Datum, 0, 0, 0);
    gh_new_procedure("delete-Datum", (swig_guile_proc) _wrap_delete_Datum, 1, 0, 0);
    gh_new_procedure("new-StrDatum", (swig_guile_proc) _wrap_new_StrDatum, 1, 0, 0);
    gh_new_procedure("StrDatum-type-name", (swig_guile_proc) _wrap_StrDatum_type_name, 1, 0, 0);
    gh_new_procedure("delete-StrDatum", (swig_guile_proc) _wrap_delete_StrDatum, 1, 0, 0);
    gh_new_procedure("StrDatum-repr", (swig_guile_proc) _wrap_StrDatum_repr, 1, 0, 0);
    gh_new_procedure("StrDatum-value", (swig_guile_proc) _wrap_StrDatum_value, 1, 0, 0);
    gh_new_procedure("StrDatum-set-value", (swig_guile_proc) _wrap_StrDatum_set_value, 2, 0, 0);
    gh_new_procedure("new-IntDatum", (swig_guile_proc) _wrap_new_IntDatum, 1, 0, 0);
    gh_new_procedure("IntDatum-type-name", (swig_guile_proc) _wrap_IntDatum_type_name, 1, 0, 0);
    gh_new_procedure("delete-IntDatum", (swig_guile_proc) _wrap_delete_IntDatum, 1, 0, 0);
    gh_new_procedure("IntDatum-repr", (swig_guile_proc) _wrap_IntDatum_repr, 1, 0, 0);
    gh_new_procedure("IntDatum-value", (swig_guile_proc) _wrap_IntDatum_value, 1, 0, 0);
    gh_new_procedure("IntDatum-set-value", (swig_guile_proc) _wrap_IntDatum_set_value, 2, 0, 0);
    gh_new_procedure("delete-Cursor", (swig_guile_proc) _wrap_delete_Cursor, 1, 0, 0);
    gh_new_procedure("Cursor-first", (swig_guile_proc) _wrap_Cursor_first, 3, 0, 0);
    gh_new_procedure("Cursor-last", (swig_guile_proc) _wrap_Cursor_last, 3, 0, 0);
    gh_new_procedure("Cursor-find", (swig_guile_proc) _wrap_Cursor_find, 3, 0, 0);
    gh_new_procedure("Cursor-next", (swig_guile_proc) _wrap_Cursor_next, 3, 0, 0);
    gh_new_procedure("Cursor-close", (swig_guile_proc) _wrap_Cursor_close, 1, 0, 0);
    gh_new_procedure("new-Row", (swig_guile_proc) _wrap_new_Row, 2, 0, 0);
    gh_new_procedure("delete-Row", (swig_guile_proc) _wrap_delete_Row, 1, 0, 0);
    gh_new_procedure("Row-close", (swig_guile_proc) _wrap_Row_close, 1, 0, 0);
    gh_new_procedure("Row-getpk", (swig_guile_proc) _wrap_Row_getpk, 1, 0, 0);
    gh_new_procedure("Row-set-n", (swig_guile_proc) _wrap_Row_set_n, 3, 0, 0);
    gh_new_procedure("Row-set", (swig_guile_proc) _wrap_Row_set, 3, 0, 0);
    gh_new_procedure("Row-from-string-n", (swig_guile_proc) _wrap_Row_from_string_n, 3, 0, 0);
    gh_new_procedure("Row-from-string", (swig_guile_proc) _wrap_Row_from_string, 3, 0, 0);
    gh_new_procedure("Row-to-string-n", (swig_guile_proc) _wrap_Row_to_string_n, 2, 0, 0);
    gh_new_procedure("Row-to-string", (swig_guile_proc) _wrap_Row_to_string, 2, 0, 0);
    gh_new_procedure("Row-get-column-n", (swig_guile_proc) _wrap_Row_get_column_n, 2, 0, 0);
    gh_new_procedure("Row-get-column", (swig_guile_proc) _wrap_Row_get_column, 2, 0, 0);
    gh_new_procedure("Row-get-col-no", (swig_guile_proc) _wrap_Row_get_col_no, 2, 0, 0);
    gh_new_procedure("Row-get-existing-column", (swig_guile_proc) _wrap_Row_get_existing_column, 2, 0, 0);
    gh_new_procedure("Row-size", (swig_guile_proc) _wrap_Row_size, 1, 0, 0);
    gh_new_procedure("new-Table", (swig_guile_proc) _wrap_new_Table, 2, 0, 0);
    gh_new_procedure("Table-get-schema", (swig_guile_proc) _wrap_Table_get_schema, 1, 0, 0);
    gh_new_procedure("Table-close", (swig_guile_proc) _wrap_Table_close, 1, 0, 0);
    gh_new_procedure("delete-Table", (swig_guile_proc) _wrap_delete_Table, 1, 0, 0);
    gh_new_procedure("Table-get-name", (swig_guile_proc) _wrap_Table_get_name, 1, 0, 0);
    gh_new_procedure("Table-save", (swig_guile_proc) _wrap_Table_save, 2, 0, 0);
    gh_new_procedure("Table-index", (swig_guile_proc) _wrap_Table_index, 4, 0, 0);
    gh_new_procedure("Table-fetch", (swig_guile_proc) _wrap_Table_fetch, 3, 0, 0);
    gh_new_procedure("Table-new-row", (swig_guile_proc) _wrap_Table_new_row, 1, 0, 0);
    gh_new_procedure("Table-cursor", (swig_guile_proc) _wrap_Table_cursor, 2, 0, 0);
    gh_new_procedure("Table-first", (swig_guile_proc) _wrap_Table_first, 2, 0, 0);
    gh_new_procedure("Table-last", (swig_guile_proc) _wrap_Table_last, 2, 0, 0);
    gh_new_procedure("Table-next", (swig_guile_proc) _wrap_Table_next, 3, 0, 0);
    gh_new_procedure("Table-get-col-name", (swig_guile_proc) _wrap_Table_get_col_name, 2, 0, 0);
    gh_new_procedure("Schema-add-column", (swig_guile_proc) _wrap_Schema_add_column, 4, 0, 0);
    gh_new_procedure("Schema-get-type-n", (swig_guile_proc) _wrap_Schema_get_type_n, 2, 0, 0);
    gh_new_procedure("Schema-get-type", (swig_guile_proc) _wrap_Schema_get_type, 2, 0, 0);
    gh_new_procedure("Schema-get-col-no", (swig_guile_proc) _wrap_Schema_get_col_no, 2, 0, 0);
    gh_new_procedure("Schema-get-name", (swig_guile_proc) _wrap_Schema_get_name, 2, 0, 0);
    gh_new_procedure("Schema-size", (swig_guile_proc) _wrap_Schema_size, 1, 0, 0);
    gh_new_procedure("delete-Schema", (swig_guile_proc) _wrap_delete_Schema, 1, 0, 0);
    gh_new_procedure("TypeMap-get-type-map", (swig_guile_proc) _wrap_TypeMap_get_type_map, 0, 0, 0);
    gh_new_procedure("TypeMap-UNDEFINED", (swig_guile_proc) _wrap_TypeMap_UNDEFINED, 0, 0, 0);
    gh_new_procedure("TypeMap-USER", (swig_guile_proc) _wrap_TypeMap_USER, 0, 0, 0);
    gh_new_procedure("TypeMap-STRING", (swig_guile_proc) _wrap_TypeMap_STRING, 0, 0, 0);
    gh_new_procedure("TypeMap-WSTRING", (swig_guile_proc) _wrap_TypeMap_WSTRING, 0, 0, 0);
    gh_new_procedure("TypeMap-INT", (swig_guile_proc) _wrap_TypeMap_INT, 0, 0, 0);
    gh_new_procedure("TypeMap-SHORT", (swig_guile_proc) _wrap_TypeMap_SHORT, 0, 0, 0);
    gh_new_procedure("TypeMap-LONG", (swig_guile_proc) _wrap_TypeMap_LONG, 0, 0, 0);
    gh_new_procedure("TypeMap-DOUBLE", (swig_guile_proc) _wrap_TypeMap_DOUBLE, 0, 0, 0);
    gh_new_procedure("TypeMap-UINT", (swig_guile_proc) _wrap_TypeMap_UINT, 0, 0, 0);
    gh_new_procedure("TypeMap-USHORT", (swig_guile_proc) _wrap_TypeMap_USHORT, 0, 0, 0);
    gh_new_procedure("TypeMap-ULONG", (swig_guile_proc) _wrap_TypeMap_ULONG, 0, 0, 0);
    gh_new_procedure("TypeMap-CHAR", (swig_guile_proc) _wrap_TypeMap_CHAR, 0, 0, 0);
    gh_new_procedure("TypeMap-WCHAR", (swig_guile_proc) _wrap_TypeMap_WCHAR, 0, 0, 0);
    gh_new_procedure("TypeMap-BOOL", (swig_guile_proc) _wrap_TypeMap_BOOL, 0, 0, 0);
    gh_new_procedure("delete-TypeMap", (swig_guile_proc) _wrap_delete_TypeMap, 1, 0, 0);
    gh_new_procedure("new-CursorRow", (swig_guile_proc) _wrap_new_CursorRow, 5, 0, 0);
    gh_new_procedure("CursorRow-get-cursor", (swig_guile_proc) _wrap_CursorRow_get_cursor, 1, 0, 0);
    gh_new_procedure("delete-CursorRow", (swig_guile_proc) _wrap_delete_CursorRow, 1, 0, 0);
    SWIG_Guile_RegisterTypes(swig_types, swig_types_initial);
}

extern "C" {
    /* Linkage: simple */
    
}

