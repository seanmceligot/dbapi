/* -*- buffer-read-only: t -*- vi: set ro: */
/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

/* Implementation : GUILE */

#define SWIG_GUILE_INIT_STATIC extern
extern "C" {

SWIG_GUILE_INIT_STATIC void
SWIG_init (void);

}

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * guile_scm_run.swg
 * ----------------------------------------------------------------------------- */

#include <libguile.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef SCM (*swig_guile_proc)();
typedef SCM (*guile_destructor)(SCM);

typedef struct swig_guile_clientdata {
  guile_destructor destroy;
  SCM goops_class;
} swig_guile_clientdata;

#define SWIG_scm2str(s) \
  SWIG_Guile_scm2newstr(s, NULL)
#define SWIG_malloc(size) \
  SCM_MUST_MALLOC(size)
#define SWIG_free(mem) \
  scm_must_free(mem)
#define SWIG_ConvertPtr(s, result, type, flags) \
  SWIG_Guile_ConvertPtr(s, result, type, flags)
#define SWIG_MustGetPtr(s, type, argnum, flags) \
  SWIG_Guile_MustGetPtr(s, type, argnum, flags, FUNC_NAME)
#define SWIG_NewPointerObj(ptr, type, owner) \
  SWIG_Guile_NewPointerObj((void*)ptr, type, owner)
#define SWIG_PointerAddress(object) \
  SWIG_Guile_PointerAddress(object)
#define SWIG_PointerType(object) \
  SWIG_Guile_PointerType(object)
#define SWIG_IsPointerOfType(object, type) \
  SWIG_Guile_IsPointerOfType(object, type)
#define SWIG_IsPointer(object) \
  SWIG_Guile_IsPointer(object)
#define SWIG_contract_assert(expr, msg)				\
  if (!(expr))							\
    scm_error(scm_str2symbol("swig-contract-assertion-failed"),	\
	      (char *) FUNC_NAME, (char *) msg,			\
	      SCM_EOL, SCM_BOOL_F); else

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Guile_ConvertMember(obj, ptr, sz, ty, FUNC_NAME)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Guile_NewMemberObj(ptr, sz, type, FUNC_NAME)
  
/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Guile_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Guile_SetModule(pointer)
  
static char *
SWIG_Guile_scm2newstr(SCM str, size_t *len) {
#define FUNC_NAME "SWIG_Guile_scm2newstr"
  char *ret;
  size_t l;

  SCM_ASSERT (SCM_STRINGP(str), str, 1, FUNC_NAME);
  
  l = SCM_STRING_LENGTH(str);
  ret = (char *) SWIG_malloc( (l + 1) * sizeof(char));
  if (!ret) return NULL;

  memcpy(ret, SCM_STRING_CHARS(str), l);
  ret[l] = '\0';
  if (len) *len = l;
  return ret;
#undef FUNC_NAME
}

static int swig_initialized = 0;
static scm_t_bits swig_tag = 0;
static scm_t_bits swig_collectable_tag = 0;
static scm_t_bits swig_destroyed_tag = 0;
static scm_t_bits swig_member_function_tag = 0;
static SCM swig_make_func = SCM_EOL;
static SCM swig_keyword = SCM_EOL;
static SCM swig_symbol = SCM_EOL;

#define SWIG_Guile_GetSmob(x) \
  ( SCM_NNULLP(x) && SCM_INSTANCEP(x) && SCM_NFALSEP(scm_slot_exists_p(x, swig_symbol)) \
      ? scm_slot_ref(x, swig_symbol) : (x) )

static SCM
SWIG_Guile_NewPointerObj(void *ptr, swig_type_info *type, int owner)
{
  if (ptr == NULL)
    return SCM_EOL;
  else {
    SCM smob;
    swig_guile_clientdata *cdata = (swig_guile_clientdata *) type->clientdata;
    if (owner)
      SCM_NEWSMOB2(smob, swig_collectable_tag, ptr, (void *) type);
    else
      SCM_NEWSMOB2(smob, swig_tag, ptr, (void *) type);

    if (!cdata || SCM_NULLP(cdata->goops_class) || swig_make_func == SCM_EOL ) {
      return smob;
    } else {
      /* the scm_make() C function only handles the creation of gf,
	 methods and classes (no instances) the (make ...) function is
	 later redefined in goops.scm.  So we need to call that
	 Scheme function. */
      return scm_apply(swig_make_func,
		       scm_list_3(cdata->goops_class,
				  swig_keyword,
				  smob),
		       SCM_EOL);
    }
  }
}

static unsigned long
SWIG_Guile_PointerAddress(SCM object)
{
  SCM smob = SWIG_Guile_GetSmob(object);
  if (SCM_NULLP(smob)) return 0;
  else if (SCM_SMOB_PREDICATE(swig_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_destroyed_tag, smob)) {
    return (unsigned long) (void *) SCM_CELL_WORD_1(smob);
  }
  else scm_wrong_type_arg("SWIG-Guile-PointerAddress", 1, object);
}

static swig_type_info *
SWIG_Guile_PointerType(SCM object)
{
  SCM smob = SWIG_Guile_GetSmob(object);
  if (SCM_NULLP(smob)) return NULL;
  else if (SCM_SMOB_PREDICATE(swig_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)
	   || SCM_SMOB_PREDICATE(swig_destroyed_tag, smob)) {
    return (swig_type_info *) SCM_CELL_WORD_2(smob);
  }
  else scm_wrong_type_arg("SWIG-Guile-PointerType", 1, object);
}
  
static int
SWIG_Guile_ConvertPtr(SCM s, void **result, swig_type_info *type, int flags)
{
  swig_cast_info *cast;
  swig_type_info *from;
  SCM smob = SWIG_Guile_GetSmob(s);

  if (SCM_NULLP(smob)) {
    *result = NULL;
    return SWIG_OK;
  } else if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
    /* we do not accept smobs representing destroyed pointers */
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return SWIG_ERROR;
    if (type) {
      cast = SWIG_TypeCheckStruct(from, type);
      if (cast) {
        *result = SWIG_TypeCast(cast, (void *) SCM_CELL_WORD_1(smob));
        return SWIG_OK;
      } else {
        return SWIG_ERROR;
      }
    } else {
      *result = (void *) SCM_CELL_WORD_1(smob);
      return SWIG_OK;
    }
  }
  return SWIG_ERROR;
}

static SWIGINLINE void *
SWIG_Guile_MustGetPtr (SCM s, swig_type_info *type,
		       int argnum, int flags, const char *func_name)
{
  void *result;
  int res = SWIG_Guile_ConvertPtr(s, &result, type, flags);
  if (!SWIG_IsOK(res)) {
    /* type mismatch */
    scm_wrong_type_arg((char *) func_name, argnum, s);
  }
  return result;
}

static SWIGINLINE int
SWIG_Guile_IsPointerOfType (SCM s, swig_type_info *type)
{
  void *result;
  if (SWIG_Guile_ConvertPtr(s, &result, type, 0)) {
    /* type mismatch */
    return 0;
  }
  else return 1;
}

static SWIGINLINE int
SWIG_Guile_IsPointer (SCM s)
{
  return SWIG_Guile_IsPointerOfType (s, NULL);
}

/* Mark a pointer object non-collectable */
static void
SWIG_Guile_MarkPointerNoncollectable(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!SCM_NULLP(smob)) {
    if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
      SCM_SET_CELL_TYPE(smob, swig_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Mark a pointer object destroyed */
static void
SWIG_Guile_MarkPointerDestroyed(SCM s)
{
  SCM smob = SWIG_Guile_GetSmob(s);
  if (!SCM_NULLP(smob)) {
    if (SCM_SMOB_PREDICATE(swig_tag, smob) || SCM_SMOB_PREDICATE(swig_collectable_tag, smob)) {
      SCM_SET_CELL_TYPE(smob, swig_destroyed_tag);
    }
    else scm_wrong_type_arg(NULL, 0, s);
  }
}

/* Member functions */

static SCM
SWIG_Guile_NewMemberObj(void *ptr, size_t sz, swig_type_info *type,
			const char *func_name)
{
  SCM smob;
  void *copy = malloc(sz);
  memcpy(copy, ptr, sz);
  SCM_NEWSMOB2(smob, swig_member_function_tag, copy, (void *) type);
  return smob;
}

static int
SWIG_Guile_ConvertMember(SCM smob, void *ptr, size_t sz, swig_type_info *type,
			 const char *func_name)
{
  swig_cast_info *cast;
  swig_type_info *from;

  if (SCM_SMOB_PREDICATE(swig_member_function_tag, smob)) {
    from = (swig_type_info *) SCM_CELL_WORD_2(smob);
    if (!from) return SWIG_ERROR;
    if (type) {
      cast = SWIG_TypeCheckStruct(from, type);
      if (!cast) return SWIG_ERROR;
    }
    memcpy(ptr, (void *) SCM_CELL_WORD_1(smob), sz);
    return SWIG_OK;
  }
  return SWIG_ERROR;
}
     

/* Init */

static int
print_swig_aux (SCM swig_smob, SCM port, scm_print_state *pstate, const char *attribute)
{
  swig_type_info *type;
  
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts((char *) "#<", port);
    scm_puts((char *) attribute, port);
    scm_puts((char *) "swig-pointer ", port);
    scm_puts((char *) SWIG_TypePrettyName(type), port);
    scm_puts((char *) " ", port);
    scm_intprint((long) SCM_CELL_WORD_1(swig_smob), 16, port);
    scm_puts((char *) ">", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

  
static int
print_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "");
}

static int
print_collectable_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "collectable-");
}

static int
print_destroyed_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  return print_swig_aux(swig_smob, port, pstate, "destroyed-");
}

static int
print_member_function_swig (SCM swig_smob, SCM port, scm_print_state *pstate)
{
  swig_type_info *type;
  type = (swig_type_info *) SCM_CELL_WORD_2(swig_smob);
  if (type) {
    scm_puts((char *) "#<", port);
    scm_puts((char *) "swig-member-function-pointer ", port);
    scm_puts((char *) SWIG_TypePrettyName(type), port);
    scm_puts((char *) " >", port);
    /* non-zero means success */
    return 1;
  } else {
    return 0;
  }
}

static SCM
equalp_swig (SCM A, SCM B)
{
  if (SCM_CELL_WORD_0(A) == SCM_CELL_WORD_0(B) && SCM_CELL_WORD_1(A) == SCM_CELL_WORD_1(B) 
      && SCM_CELL_WORD_2(A) == SCM_CELL_WORD_2(B))
    return SCM_BOOL_T;
  else return SCM_BOOL_F;
}

static size_t
free_swig(SCM A)
{
  swig_type_info *type = (swig_type_info *) SCM_CELL_WORD_2(A);
  if (type) {
    if (type->clientdata && ((swig_guile_clientdata *)type->clientdata)->destroy)
      ((swig_guile_clientdata *)type->clientdata)->destroy(A);
  } 
  return 0;
}

static size_t
free_swig_member_function(SCM A)
{
  free((swig_type_info *) SCM_CELL_WORD_1(A));
  return 0;
}

static int
ensure_smob_tag(SCM swig_module,
		scm_t_bits *tag_variable,
		const char *smob_name,
		const char *scheme_variable_name)
{
  SCM variable = scm_sym2var(scm_str2symbol(scheme_variable_name),
			     scm_module_lookup_closure(swig_module),
			     SCM_BOOL_T);
  if (SCM_UNBNDP(SCM_VARIABLE_REF(variable))) {
    *tag_variable = scm_make_smob_type((char*)scheme_variable_name, 0);
    SCM_VARIABLE_SET(variable,
		     scm_ulong2num(*tag_variable));
    return 1;
  }
  else {
    *tag_variable = scm_num2ulong(SCM_VARIABLE_REF(variable), 0,
				  "SWIG_Guile_Init");
    return 0;
  }
}

static SCM
SWIG_Guile_Init ()
{
  static SCM swig_module;
  
  if (swig_initialized) return swig_module;
  swig_initialized = 1;

  swig_module = scm_c_resolve_module("Swig swigrun");
  if (ensure_smob_tag(swig_module, &swig_tag,
		      "swig-pointer", "swig-pointer-tag")) {
    scm_set_smob_print(swig_tag, print_swig);
    scm_set_smob_equalp(swig_tag, equalp_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_collectable_tag,
		      "collectable-swig-pointer", "collectable-swig-pointer-tag")) {
    scm_set_smob_print(swig_collectable_tag, print_collectable_swig);
    scm_set_smob_equalp(swig_collectable_tag, equalp_swig);
    scm_set_smob_free(swig_collectable_tag, free_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_destroyed_tag,
		      "destroyed-swig-pointer", "destroyed-swig-pointer-tag")) {
    scm_set_smob_print(swig_destroyed_tag, print_destroyed_swig);
    scm_set_smob_equalp(swig_destroyed_tag, equalp_swig);
  }
  if (ensure_smob_tag(swig_module, &swig_member_function_tag,
		      "swig-member-function-pointer", "swig-member-function-pointer-tag")) {
    scm_set_smob_print(swig_member_function_tag, print_member_function_swig);
    scm_set_smob_free(swig_member_function_tag, free_swig_member_function);
  }
  swig_make_func = scm_permanent_object(
  scm_variable_ref(scm_c_module_lookup(scm_c_resolve_module("oop goops"), "make")));
  swig_keyword = scm_permanent_object(scm_c_make_keyword((char*) "init-smob"));
  swig_symbol = scm_permanent_object(scm_str2symbol("swig-smob"));
#ifdef SWIG_INIT_RUNTIME_MODULE
  SWIG_INIT_RUNTIME_MODULE
#endif

  return swig_module;
}

static swig_module_info *
SWIG_Guile_GetModule()
{
  SCM module;
  SCM variable;

  module = SWIG_Guile_Init();

  variable = scm_sym2var(scm_str2symbol("swig-type-list-address" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME),
			       scm_module_lookup_closure(module),
			       SCM_BOOL_T);
  if (SCM_UNBNDP(SCM_VARIABLE_REF(variable))) {
    return NULL;
  } else {
    return (swig_module_info *) scm_num2ulong(SCM_VARIABLE_REF(variable), 0, "SWIG_Guile_Init");
  }
}

static void
SWIG_Guile_SetModule(swig_module_info *swig_module)
{
  SCM module;
  SCM variable;

  module = SWIG_Guile_Init();
    
  variable = scm_sym2var(scm_str2symbol("swig-type-list-address" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME),
			       scm_module_lookup_closure(module),
			       SCM_BOOL_T);

  SCM_VARIABLE_SET(variable, scm_ulong2num((unsigned long) swig_module));
}

static int
SWIG_Guile_GetArgs (SCM *dest, SCM rest,
		    int reqargs, int optargs,
		    const char *procname)
{
  int i;
  int num_args_passed = 0;
  for (i = 0; i<reqargs; i++) {
    if (!SCM_CONSP(rest))
      scm_wrong_num_args(scm_makfrom0str((char *) procname));
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (i = 0; i<optargs && SCM_CONSP(rest); i++) {
    *dest++ = SCM_CAR(rest);
    rest = SCM_CDR(rest);
    num_args_passed++;
  }
  for (; i<optargs; i++)
    *dest++ = SCM_UNDEFINED;
  if (!SCM_NULLP(rest))
    scm_wrong_num_args(scm_makfrom0str((char *) procname));
  return num_args_passed;
}

#ifdef __cplusplus
}
#endif



#define GUILE_MAYBE_VALUES \
      if (gswig_list_p) gswig_result = scm_values(gswig_result);

#define GUILE_MAYBE_VECTOR \
      if (gswig_list_p) gswig_result = scm_vector(gswig_result);

#define SWIG_APPEND_VALUE(object)						\
    if (gswig_result == SCM_UNSPECIFIED)						\
        gswig_result = object;							\
    else {									\
      if (!gswig_list_p) {							\
	      gswig_list_p = 1;							\
	      gswig_result = scm_listify(gswig_result, object, SCM_UNDEFINED);	\
      }									\
      else									\
            gswig_result = scm_append(scm_listify(gswig_result, scm_listify(object, SCM_UNDEFINED), SCM_UNDEFINED));		\
    }
    /* used by Lib/exception.i */
    #define gh_symbol2scm scm_str2symbol
    /* useb by Lib/cdata.i */
    #define gh_str2scm scm_mem2string


static swig_guile_clientdata _swig_guile_clientdataGreenDb = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataGreenEnv = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataDatum = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataStrDatum = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataIntDatum = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataCursor = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataRow = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataTable = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataSchema = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataTypeMap = { NULL, SCM_EOL };
static swig_guile_clientdata _swig_guile_clientdataCursorRow = { NULL, SCM_EOL };

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Cursor swig_types[0]
#define SWIGTYPE_p_CursorRow swig_types[1]
#define SWIGTYPE_p_DataType swig_types[2]
#define SWIGTYPE_p_Datum swig_types[3]
#define SWIGTYPE_p_GreenDb swig_types[4]
#define SWIGTYPE_p_GreenEnv swig_types[5]
#define SWIGTYPE_p_IntDatum swig_types[6]
#define SWIGTYPE_p_ResultSet swig_types[7]
#define SWIGTYPE_p_Row swig_types[8]
#define SWIGTYPE_p_Schema swig_types[9]
#define SWIGTYPE_p_StrDatum swig_types[10]
#define SWIGTYPE_p_StringConvert swig_types[11]
#define SWIGTYPE_p_Table swig_types[12]
#define SWIGTYPE_p_TypeMap swig_types[13]
#define SWIGTYPE_p_p_char swig_types[14]
#define SWIGTYPE_p_std__type_info swig_types[15]
#define SWIGTYPE_p_unsigned_long swig_types[16]
static swig_type_info *swig_types[18];
static swig_module_info swig_module = {swig_types, 17, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


#include <db_cxx.h>
#include "greendb/greendb.hh"
#include "greendb/datum.hh"
#include "greendb/strdatum.hh"
#include "greendb/greenenv.hh"
#include "greendb/row.hh"
#include "greendb/table.hh"
#include "greendb/cursor.hh"
#include "greendb/typemap.hh"
#include "greendb/schema.hh"

static int gswig_const_TYPE_UNDEFINED = TYPE_UNDEFINED;
static int gswig_const_TYPE_USER = TYPE_USER;
static int gswig_const_TYPE_STRING = TYPE_STRING;
static int gswig_const_TYPE_INT = TYPE_INT;
static int gswig_const_TYPE_END = TYPE_END;
static SCM
_wrap_new_GreenDb (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "new-GreenDb"
  GreenEnv *arg1 = (GreenEnv *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  GreenDb *result = 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenEnv *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenEnv, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  result = (GreenDb *)new GreenDb(arg1,(char const *)arg2,(char const *)arg3);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GreenDb, 1);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_GreenDb (SCM s_0)
{
#define FUNC_NAME "delete-GreenDb"
  GreenDb *arg1 = (GreenDb *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_unknown (SCM s_0)
{
#define FUNC_NAME "GreenDb-open-unknown"
  GreenDb *arg1 = (GreenDb *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  (arg1)->open_unknown();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_queue (SCM s_0)
{
#define FUNC_NAME "GreenDb-open-queue"
  GreenDb *arg1 = (GreenDb *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  (arg1)->open_queue();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_recno (SCM s_0)
{
#define FUNC_NAME "GreenDb-open-recno"
  GreenDb *arg1 = (GreenDb *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  (arg1)->open_recno();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_hash (SCM s_0)
{
#define FUNC_NAME "GreenDb-open-hash"
  GreenDb *arg1 = (GreenDb *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  (arg1)->open_hash();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open_btree (SCM s_0)
{
#define FUNC_NAME "GreenDb-open-btree"
  GreenDb *arg1 = (GreenDb *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  (arg1)->open_btree();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_open (SCM s_0, SCM s_1, SCM s_2, SCM s_3, SCM s_4)
{
#define FUNC_NAME "GreenDb-open"
  GreenDb *arg1 = (GreenDb *) 0 ;
  int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = scm_num2uint(s_2, SCM_ARG1, FUNC_NAME);
  }
  {
    arg4 = scm_num2uint(s_3, SCM_ARG1, FUNC_NAME);
  }
  {
    arg5 = scm_num2int(s_4, SCM_ARG1, FUNC_NAME);
  }
  (arg1)->open(arg2,arg3,arg4,arg5);
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_dbfile (SCM s_0)
{
#define FUNC_NAME "GreenDb-dbfile"
  GreenDb *arg1 = (GreenDb *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  result = (char *)((GreenDb const *)arg1)->dbfile();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_name (SCM s_0)
{
#define FUNC_NAME "GreenDb-name"
  GreenDb *arg1 = (GreenDb *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  result = (char *)((GreenDb const *)arg1)->name();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_put (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "GreenDb-put"
  GreenDb *arg1 = (GreenDb *) 0 ;
  Datum *arg2 = 0 ;
  Datum *arg3 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  {
    arg2 = (Datum *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Datum, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  (arg1)->put(*arg2,*arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_fetch (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "GreenDb-fetch"
  GreenDb *arg1 = (GreenDb *) 0 ;
  Datum *arg2 = 0 ;
  Datum *arg3 = 0 ;
  int result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  {
    arg2 = (Datum *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Datum, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (int)(arg1)->fetch(*arg2,*arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_cursor (SCM s_0)
{
#define FUNC_NAME "GreenDb-cursor"
  GreenDb *arg1 = (GreenDb *) 0 ;
  Cursor *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  result = (Cursor *)(arg1)->cursor();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Cursor, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenDb_close (SCM s_0)
{
#define FUNC_NAME "GreenDb-close"
  GreenDb *arg1 = (GreenDb *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenDb *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenDb, 1, 0);
  }
  (arg1)->close();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_GreenEnv (SCM s_0)
{
#define FUNC_NAME "new-GreenEnv"
  char *arg1 = (char *) 0 ;
  GreenEnv *result = 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (GreenEnv *)new GreenEnv((char const *)arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GreenEnv, 1);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_GreenEnv (SCM s_0)
{
#define FUNC_NAME "delete-GreenEnv"
  GreenEnv *arg1 = (GreenEnv *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenEnv *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenEnv, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenEnv_open (SCM s_0)
{
#define FUNC_NAME "GreenEnv-open"
  GreenEnv *arg1 = (GreenEnv *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenEnv *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenEnv, 1, 0);
  }
  (arg1)->open();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenEnv_close (SCM s_0)
{
#define FUNC_NAME "GreenEnv-close"
  GreenEnv *arg1 = (GreenEnv *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenEnv *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenEnv, 1, 0);
  }
  (arg1)->close();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_GreenEnv_home (SCM s_0)
{
#define FUNC_NAME "GreenEnv-home"
  GreenEnv *arg1 = (GreenEnv *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (GreenEnv *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_GreenEnv, 1, 0);
  }
  result = (char *)(arg1)->home();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_Datum ()
{
#define FUNC_NAME "new-Datum"
  Datum *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  result = (Datum *)new Datum();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Datum, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_Datum (SCM s_0)
{
#define FUNC_NAME "delete-Datum"
  Datum *arg1 = (Datum *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Datum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Datum, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_StrDatum (SCM s_0)
{
#define FUNC_NAME "new-StrDatum"
  char *arg1 = (char *) 0 ;
  StrDatum *result = 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  result = (StrDatum *)new StrDatum(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_StrDatum, 1);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_StrDatum_type_name (SCM s_0)
{
#define FUNC_NAME "StrDatum-type-name"
  StrDatum *arg1 = (StrDatum *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (StrDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_StrDatum, 1, 0);
  }
  result = (char *)((StrDatum const *)arg1)->type_name();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_StrDatum (SCM s_0)
{
#define FUNC_NAME "delete-StrDatum"
  StrDatum *arg1 = (StrDatum *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (StrDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_StrDatum, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_StrDatum_repr (SCM s_0)
{
#define FUNC_NAME "StrDatum-repr"
  StrDatum *arg1 = (StrDatum *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (StrDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_StrDatum, 1, 0);
  }
  result = (char *)((StrDatum const *)arg1)->repr();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_StrDatum_value (SCM s_0)
{
#define FUNC_NAME "StrDatum-value"
  StrDatum *arg1 = (StrDatum *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (StrDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_StrDatum, 1, 0);
  }
  result = (char *)(arg1)->value();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_StrDatum_set_value (SCM s_0, SCM s_1)
{
#define FUNC_NAME "StrDatum-set-value"
  StrDatum *arg1 = (StrDatum *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (StrDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_StrDatum, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (char *)(arg1)->set_value(arg2);
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_IntDatum (SCM s_0)
{
#define FUNC_NAME "new-IntDatum"
  int arg1 ;
  IntDatum *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = scm_num2int(s_0, SCM_ARG1, FUNC_NAME);
  }
  result = (IntDatum *)new IntDatum(arg1);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_IntDatum, 1);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntDatum_type_name (SCM s_0)
{
#define FUNC_NAME "IntDatum-type-name"
  IntDatum *arg1 = (IntDatum *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (IntDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_IntDatum, 1, 0);
  }
  result = (char *)((IntDatum const *)arg1)->type_name();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_IntDatum (SCM s_0)
{
#define FUNC_NAME "delete-IntDatum"
  IntDatum *arg1 = (IntDatum *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (IntDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_IntDatum, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntDatum_repr (SCM s_0)
{
#define FUNC_NAME "IntDatum-repr"
  IntDatum *arg1 = (IntDatum *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (IntDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_IntDatum, 1, 0);
  }
  result = (char *)((IntDatum const *)arg1)->repr();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntDatum_value (SCM s_0)
{
#define FUNC_NAME "IntDatum-value"
  IntDatum *arg1 = (IntDatum *) 0 ;
  int result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (IntDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_IntDatum, 1, 0);
  }
  result = (int)(arg1)->value();
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_IntDatum_set_value (SCM s_0, SCM s_1)
{
#define FUNC_NAME "IntDatum-set-value"
  IntDatum *arg1 = (IntDatum *) 0 ;
  int arg2 ;
  int result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (IntDatum *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_IntDatum, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (int)(arg1)->set_value(arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_Cursor (SCM s_0)
{
#define FUNC_NAME "delete-Cursor"
  Cursor *arg1 = (Cursor *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Cursor *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Cursor, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Cursor_first (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "Cursor-first"
  Cursor *arg1 = (Cursor *) 0 ;
  Datum *arg2 = 0 ;
  Datum *arg3 = 0 ;
  int result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Cursor *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Cursor, 1, 0);
  }
  {
    arg2 = (Datum *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Datum, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (int)(arg1)->first(*arg2,*arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Cursor_last (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "Cursor-last"
  Cursor *arg1 = (Cursor *) 0 ;
  Datum *arg2 = 0 ;
  Datum *arg3 = 0 ;
  int result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Cursor *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Cursor, 1, 0);
  }
  {
    arg2 = (Datum *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Datum, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (int)(arg1)->last(*arg2,*arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Cursor_find (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "Cursor-find"
  Cursor *arg1 = (Cursor *) 0 ;
  Datum *arg2 = 0 ;
  Datum *arg3 = 0 ;
  int result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Cursor *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Cursor, 1, 0);
  }
  {
    arg2 = (Datum *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Datum, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (int)(arg1)->find(*arg2,*arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Cursor_next (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "Cursor-next"
  Cursor *arg1 = (Cursor *) 0 ;
  Datum *arg2 = 0 ;
  Datum *arg3 = 0 ;
  int result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Cursor *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Cursor, 1, 0);
  }
  {
    arg2 = (Datum *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Datum, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (int)(arg1)->next(*arg2,*arg3);
  {
    gswig_result = scm_long2num(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Cursor_close (SCM s_0)
{
#define FUNC_NAME "Cursor-close"
  Cursor *arg1 = (Cursor *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Cursor *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Cursor, 1, 0);
  }
  (arg1)->close();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_Row (SCM s_0, SCM s_1)
{
#define FUNC_NAME "new-Row"
  Table *arg1 = (Table *) 0 ;
  size_t arg2 ;
  Row *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = scm_num2ulong(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (Row *)new Row(arg1,arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Row, 1);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_Row (SCM s_0)
{
#define FUNC_NAME "delete-Row"
  Row *arg1 = (Row *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_close (SCM s_0)
{
#define FUNC_NAME "Row-close"
  Row *arg1 = (Row *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  (arg1)->close();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_getpk (SCM s_0)
{
#define FUNC_NAME "Row-getpk"
  Row *arg1 = (Row *) 0 ;
  Datum *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  {
    Datum &_result_ref = (arg1)->getpk();
    result = (Datum *) &_result_ref;
  }
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Datum, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_set (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "Row-set"
  Row *arg1 = (Row *) 0 ;
  char *arg2 = (char *) 0 ;
  Datum *arg3 = 0 ;
  bool result;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (bool)(arg1)->set((char const *)arg2,*arg3);
  {
    gswig_result = SCM_BOOL(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_from_string (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "Row-from-string"
  Row *arg1 = (Row *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int must_free2 = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  (arg1)->from_string((char const *)arg2,(char const *)arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  if (must_free2 && arg2) SWIG_free(arg2);
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_to_string (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Row-to-string"
  Row *arg1 = (Row *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (char *)(arg1)->to_string((char const *)arg2);
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_get_column (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Row-get-column"
  Row *arg1 = (Row *) 0 ;
  char *arg2 = (char *) 0 ;
  Datum *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (Datum *)(arg1)->get_column((char const *)arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Datum, 0);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_get_col_no (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Row-get-col-no"
  Row *arg1 = (Row *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)(arg1)->get_col_no((char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_get_existing_column (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Row-get-existing-column"
  Row *arg1 = (Row *) 0 ;
  int arg2 ;
  Datum *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (Datum *)(arg1)->get_existing_column(arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Datum, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Row_size (SCM s_0)
{
#define FUNC_NAME "Row-size"
  Row *arg1 = (Row *) 0 ;
  int result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Row *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Row, 1, 0);
  }
  result = (int)(arg1)->size();
  {
    gswig_result = scm_long2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_Table (SCM s_0, SCM s_1)
{
#define FUNC_NAME "new-Table"
  char *arg1 = (char *) 0 ;
  GreenEnv *arg2 = 0 ;
  Table *result = 0 ;
  int must_free1 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = SWIG_scm2str(s_0);
    must_free1 = 1;
  }
  {
    arg2 = (GreenEnv *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_GreenEnv, 2, 0);
  }
  result = (Table *)new Table((char const *)arg1,*arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Table, 1);
  }
  if (must_free1 && arg1) SWIG_free(arg1);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_get_schema (SCM s_0)
{
#define FUNC_NAME "Table-get-schema"
  Table *arg1 = (Table *) 0 ;
  Schema *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  result = (Schema *)(arg1)->get_schema();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Schema, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_close (SCM s_0)
{
#define FUNC_NAME "Table-close"
  Table *arg1 = (Table *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  (arg1)->close();
  gswig_result = SCM_UNSPECIFIED;
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_Table (SCM s_0)
{
#define FUNC_NAME "delete-Table"
  Table *arg1 = (Table *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_save (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Table-save"
  Table *arg1 = (Table *) 0 ;
  Row *arg2 = (Row *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = (Row *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_Row, 2, 0);
  }
  (arg1)->save(arg2);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_fetch (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "Table-fetch"
  Table *arg1 = (Table *) 0 ;
  char *arg2 = (char *) 0 ;
  Datum *arg3 = 0 ;
  Row *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (Row *)(arg1)->fetch((char const *)arg2,*arg3);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Row, 0);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_new_row (SCM s_0)
{
#define FUNC_NAME "Table-new-row"
  Table *arg1 = (Table *) 0 ;
  Row *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  result = (Row *)(arg1)->new_row();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Row, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_get_database (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Table-get-database"
  Table *arg1 = (Table *) 0 ;
  char *arg2 = (char *) 0 ;
  GreenDb *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (GreenDb *)(arg1)->get_database((char const *)arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GreenDb, 0);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_get_index (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Table-get-index"
  Table *arg1 = (Table *) 0 ;
  char *arg2 = (char *) 0 ;
  GreenDb *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (GreenDb *)(arg1)->get_index((char const *)arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_GreenDb, 0);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_first (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Table-first"
  Table *arg1 = (Table *) 0 ;
  char *arg2 = (char *) 0 ;
  CursorRow *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (CursorRow *)(arg1)->first((char const *)arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_CursorRow, 0);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_last (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Table-last"
  Table *arg1 = (Table *) 0 ;
  char *arg2 = (char *) 0 ;
  CursorRow *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (CursorRow *)(arg1)->last((char const *)arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_CursorRow, 0);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_next__SWIG_0 (int argc, SCM *argv)
{
#define FUNC_NAME "Table-next"
  Table *arg1 = (Table *) 0 ;
  CursorRow *arg2 = (CursorRow *) 0 ;
  char *arg3 = (char *) 0 ;
  CursorRow *result = 0 ;
  int must_free3 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(argv[0], SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = (CursorRow *)SWIG_MustGetPtr(argv[1], SWIGTYPE_p_CursorRow, 2, 0);
  }
  {
    arg3 = SWIG_scm2str(argv[2]);
    must_free3 = 1;
  }
  result = (CursorRow *)(arg1)->next(arg2,(char const *)arg3);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_CursorRow, 0);
  }
  
  
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_cursor (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Table-cursor"
  Table *arg1 = (Table *) 0 ;
  char *arg2 = (char *) 0 ;
  Cursor *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (Cursor *)(arg1)->cursor((char const *)arg2);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Cursor, 0);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_find_all (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "Table-find-all"
  Table *arg1 = (Table *) 0 ;
  char *arg2 = (char *) 0 ;
  Datum *arg3 = (Datum *) 0 ;
  ResultSet *result = 0 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (ResultSet *)(arg1)->find_all((char const *)arg2,arg3);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_ResultSet, 0);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_next__SWIG_1 (int argc, SCM *argv)
{
#define FUNC_NAME "Table-next"
  Table *arg1 = (Table *) 0 ;
  Cursor *arg2 = (Cursor *) 0 ;
  Datum *arg3 = 0 ;
  Datum *arg4 = (Datum *) 0 ;
  CursorRow *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(argv[0], SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = (Cursor *)SWIG_MustGetPtr(argv[1], SWIGTYPE_p_Cursor, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(argv[2], SWIGTYPE_p_Datum, 3, 0);
  }
  {
    arg4 = (Datum *)SWIG_MustGetPtr(argv[3], SWIGTYPE_p_Datum, 4, 0);
  }
  result = (CursorRow *)(arg1)->next(arg2,*arg3,arg4);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_CursorRow, 0);
  }
  
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_next(SCM rest)
{
#define FUNC_NAME "Table-next"
  SCM argv[4];
  int argc = SWIG_Guile_GetArgs (argv, rest, 0, 4, "Table-next");
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      int res = SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Table, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *ptr;
        int res = SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_CursorRow, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = SCM_STRINGP(argv[2]) ? 1 : 0;
        }
        if (_v) {
          return _wrap_Table_next__SWIG_0(argc,argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      int res = SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_Table, 0);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        void *ptr;
        int res = SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_Cursor, 0);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          void *ptr;
          int res = SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_Datum, 0);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            void *ptr;
            int res = SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_Datum, 0);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Table_next__SWIG_1(argc,argv);
          }
        }
      }
    }
  }
  
  scm_misc_error("Table-next", "No matching method for generic function `Table_next'", SCM_EOL);
#undef FUNC_NAME
}


static SCM
_wrap_Table_get_col_name (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Table-get-col-name"
  Table *arg1 = (Table *) 0 ;
  int arg2 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)((Table const *)arg1)->get_col_name(arg2);
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_get_name (SCM s_0)
{
#define FUNC_NAME "Table-get-name"
  Table *arg1 = (Table *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  result = (char *)((Table const *)arg1)->get_name();
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Table_exists (SCM s_0)
{
#define FUNC_NAME "Table-exists"
  Table *arg1 = (Table *) 0 ;
  bool result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  result = (bool)(arg1)->exists();
  {
    gswig_result = SCM_BOOL(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Schema_add_column (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "Schema-add-column"
  Schema *arg1 = (Schema *) 0 ;
  char *arg2 = (char *) 0 ;
  DataType arg3 ;
  bool arg4 ;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Schema *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Schema, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  {
    arg3 = (DataType) scm_num2int(s_2, SCM_ARG1, FUNC_NAME); 
  }
  {
    arg4 = SCM_NFALSEP(s_3);
  }
  (arg1)->add_column((char const *)arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Schema_add_columns (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "Schema-add-columns"
  Schema *arg1 = (Schema *) 0 ;
  char **arg2 ;
  DataType *arg3 ;
  unsigned int arg4 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Schema *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Schema, 1, 0);
  }
  {
    arg2 = (char **)SWIG_MustGetPtr(s_1, SWIGTYPE_p_p_char, 2, 0);
  }
  {
    arg3 = (DataType *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_DataType, 3, 0);
  }
  {
    arg4 = scm_num2uint(s_3, SCM_ARG1, FUNC_NAME);
  }
  (arg1)->add_columns((char const *(*))arg2,arg3,arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Schema_get_type (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Schema-get-type"
  Schema *arg1 = (Schema *) 0 ;
  char *arg2 = (char *) 0 ;
  DataType result;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Schema *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Schema, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (DataType)((Schema const *)arg1)->get_type((char const *)arg2);
  {
    gswig_result = scm_long2num(result); 
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Schema_get_col_no (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Schema-get-col-no"
  Schema *arg1 = (Schema *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Schema *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Schema, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (int)((Schema const *)arg1)->get_col_no((char const *)arg2);
  {
    gswig_result = scm_long2num(result);
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Schema_get_name (SCM s_0, SCM s_1)
{
#define FUNC_NAME "Schema-get-name"
  Schema *arg1 = (Schema *) 0 ;
  int arg2 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Schema *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Schema, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)((Schema const *)arg1)->get_name(arg2);
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_Schema_size (SCM s_0)
{
#define FUNC_NAME "Schema-size"
  Schema *arg1 = (Schema *) 0 ;
  size_t result;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Schema *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Schema, 1, 0);
  }
  result = ((Schema const *)arg1)->size();
  {
    gswig_result = scm_ulong2num(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_Schema (SCM s_0)
{
#define FUNC_NAME "delete-Schema"
  Schema *arg1 = (Schema *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Schema *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Schema, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TypeMap_get_type_map ()
{
#define FUNC_NAME "TypeMap-get-type-map"
  TypeMap *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  result = (TypeMap *)TypeMap::get_type_map();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_TypeMap, 0);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TypeMap_add_string_convert (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "TypeMap-add-string-convert"
  TypeMap *arg1 = (TypeMap *) 0 ;
  std::type_info *arg2 = (std::type_info *) 0 ;
  StringConvert *arg3 = (StringConvert *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (TypeMap *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_TypeMap, 1, 0);
  }
  {
    arg2 = (std::type_info *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__type_info, 2, 0);
  }
  {
    arg3 = (StringConvert *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_StringConvert, 3, 0);
  }
  (arg1)->add_string_convert((std::type_info const *)arg2,arg3);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TypeMap_to_string (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "TypeMap-to-string"
  TypeMap *arg1 = (TypeMap *) 0 ;
  std::type_info *arg2 = (std::type_info *) 0 ;
  Datum *arg3 = (Datum *) 0 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (TypeMap *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_TypeMap, 1, 0);
  }
  {
    arg2 = (std::type_info *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__type_info, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  result = (char *)(arg1)->to_string((std::type_info const *)arg2,arg3);
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TypeMap_from_string (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "TypeMap-from-string"
  TypeMap *arg1 = (TypeMap *) 0 ;
  std::type_info *arg2 = (std::type_info *) 0 ;
  Datum *arg3 = (Datum *) 0 ;
  char *arg4 = (char *) 0 ;
  int must_free4 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (TypeMap *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_TypeMap, 1, 0);
  }
  {
    arg2 = (std::type_info *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__type_info, 2, 0);
  }
  {
    arg3 = (Datum *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Datum, 3, 0);
  }
  {
    arg4 = SWIG_scm2str(s_3);
    must_free4 = 1;
  }
  (arg1)->from_string((std::type_info const *)arg2,arg3,(char const *)arg4);
  gswig_result = SCM_UNSPECIFIED;
  
  
  
  if (must_free4 && arg4) SWIG_free(arg4);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TypeMap_from_string_size (SCM s_0, SCM s_1, SCM s_2)
{
#define FUNC_NAME "TypeMap-from-string-size"
  TypeMap *arg1 = (TypeMap *) 0 ;
  std::type_info *arg2 = (std::type_info *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t result;
  int must_free3 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (TypeMap *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_TypeMap, 1, 0);
  }
  {
    arg2 = (std::type_info *)SWIG_MustGetPtr(s_1, SWIGTYPE_p_std__type_info, 2, 0);
  }
  {
    arg3 = SWIG_scm2str(s_2);
    must_free3 = 1;
  }
  result = (arg1)->from_string_size((std::type_info const *)arg2,(char const *)arg3);
  {
    gswig_result = scm_ulong2num(result);
  }
  
  
  if (must_free3 && arg3) SWIG_free(arg3);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TypeMap_get_type_id (SCM s_0, SCM s_1)
{
#define FUNC_NAME "TypeMap-get-type-id"
  TypeMap *arg1 = (TypeMap *) 0 ;
  char *arg2 = (char *) 0 ;
  DataType result;
  int must_free2 = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (TypeMap *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_TypeMap, 1, 0);
  }
  {
    arg2 = SWIG_scm2str(s_1);
    must_free2 = 1;
  }
  result = (DataType)(arg1)->get_type_id((char const *)arg2);
  {
    gswig_result = scm_long2num(result); 
  }
  
  if (must_free2 && arg2) SWIG_free(arg2);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TypeMap_get_type_name (SCM s_0, SCM s_1)
{
#define FUNC_NAME "TypeMap-get-type-name"
  TypeMap *arg1 = (TypeMap *) 0 ;
  int arg2 ;
  char *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (TypeMap *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_TypeMap, 1, 0);
  }
  {
    arg2 = scm_num2int(s_1, SCM_ARG1, FUNC_NAME);
  }
  result = (char *)(arg1)->get_type_name(arg2);
  {
    gswig_result = scm_makfrom0str(result);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_TypeMap (SCM s_0)
{
#define FUNC_NAME "delete-TypeMap"
  TypeMap *arg1 = (TypeMap *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (TypeMap *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_TypeMap, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TYPE_UNDEFINED(SCM s_0)
{
#define FUNC_NAME "TYPE-UNDEFINED"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_TYPE_UNDEFINED);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TYPE_USER(SCM s_0)
{
#define FUNC_NAME "TYPE-USER"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_TYPE_USER);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TYPE_STRING(SCM s_0)
{
#define FUNC_NAME "TYPE-STRING"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_TYPE_STRING);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TYPE_INT(SCM s_0)
{
#define FUNC_NAME "TYPE-INT"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_TYPE_INT);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_TYPE_END(SCM s_0)
{
#define FUNC_NAME "TYPE-END"
  SCM gswig_result;
  
  {
    gswig_result = scm_long2num(gswig_const_TYPE_END);
  }
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_new_CursorRow (SCM s_0, SCM s_1, SCM s_2, SCM s_3)
{
#define FUNC_NAME "new-CursorRow"
  Table *arg1 = (Table *) 0 ;
  size_t arg2 ;
  Cursor *arg3 = (Cursor *) 0 ;
  Datum *arg4 = (Datum *) 0 ;
  CursorRow *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (Table *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_Table, 1, 0);
  }
  {
    arg2 = scm_num2ulong(s_1, SCM_ARG1, FUNC_NAME);
  }
  {
    arg3 = (Cursor *)SWIG_MustGetPtr(s_2, SWIGTYPE_p_Cursor, 3, 0);
  }
  {
    arg4 = (Datum *)SWIG_MustGetPtr(s_3, SWIGTYPE_p_Datum, 4, 0);
  }
  result = (CursorRow *)new CursorRow(arg1,arg2,arg3,arg4);
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_CursorRow, 1);
  }
  
  
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_CursorRow_get_cursor (SCM s_0)
{
#define FUNC_NAME "CursorRow-get-cursor"
  CursorRow *arg1 = (CursorRow *) 0 ;
  Cursor *result = 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (CursorRow *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_CursorRow, 1, 0);
  }
  result = (Cursor *)(arg1)->get_cursor();
  {
    gswig_result = SWIG_NewPointerObj (result, SWIGTYPE_p_Cursor, 0);
  }
  
  
  return gswig_result;
#undef FUNC_NAME
}


static SCM
_wrap_delete_CursorRow (SCM s_0)
{
#define FUNC_NAME "delete-CursorRow"
  CursorRow *arg1 = (CursorRow *) 0 ;
  SCM gswig_result;
  int gswig_list_p = 0;
  
  {
    arg1 = (CursorRow *)SWIG_MustGetPtr(s_0, SWIGTYPE_p_CursorRow, 1, 0);
  }
  delete arg1;
  
  gswig_result = SCM_UNSPECIFIED;
  
  SWIG_Guile_MarkPointerDestroyed(s_0);
  
  return gswig_result;
#undef FUNC_NAME
}


#ifdef __cplusplus
extern "C" {
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CursorRowTo_p_Row(void *x) {
    return (void *)((Row *)  ((CursorRow *) x));
}
static void *_p_IntDatumTo_p_Datum(void *x) {
    return (void *)((Datum *)  ((IntDatum *) x));
}
static void *_p_StrDatumTo_p_Datum(void *x) {
    return (void *)((Datum *)  ((StrDatum *) x));
}
static swig_type_info _swigt__p_Cursor = {"_p_Cursor", "Cursor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CursorRow = {"_p_CursorRow", "CursorRow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DataType = {"_p_DataType", "enum DataType *|DataType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Datum = {"_p_Datum", "Datum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GreenDb = {"_p_GreenDb", "GreenDb *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GreenEnv = {"_p_GreenEnv", "GreenEnv *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IntDatum = {"_p_IntDatum", "IntDatum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ResultSet = {"_p_ResultSet", "ResultSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Row = {"_p_Row", "Row *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Schema = {"_p_Schema", "Schema *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StrDatum = {"_p_StrDatum", "StrDatum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StringConvert = {"_p_StringConvert", "StringConvert *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Table = {"_p_Table", "Table *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeMap = {"_p_TypeMap", "TypeMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__type_info = {"_p_std__type_info", "std::type_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "unsigned long *|SCM *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Cursor,
  &_swigt__p_CursorRow,
  &_swigt__p_DataType,
  &_swigt__p_Datum,
  &_swigt__p_GreenDb,
  &_swigt__p_GreenEnv,
  &_swigt__p_IntDatum,
  &_swigt__p_ResultSet,
  &_swigt__p_Row,
  &_swigt__p_Schema,
  &_swigt__p_StrDatum,
  &_swigt__p_StringConvert,
  &_swigt__p_Table,
  &_swigt__p_TypeMap,
  &_swigt__p_p_char,
  &_swigt__p_std__type_info,
  &_swigt__p_unsigned_long,
};

static swig_cast_info _swigc__p_Cursor[] = {  {&_swigt__p_Cursor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CursorRow[] = {  {&_swigt__p_CursorRow, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DataType[] = {  {&_swigt__p_DataType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Datum[] = {  {&_swigt__p_Datum, 0, 0, 0},  {&_swigt__p_IntDatum, _p_IntDatumTo_p_Datum, 0, 0},  {&_swigt__p_StrDatum, _p_StrDatumTo_p_Datum, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GreenDb[] = {  {&_swigt__p_GreenDb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GreenEnv[] = {  {&_swigt__p_GreenEnv, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IntDatum[] = {  {&_swigt__p_IntDatum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ResultSet[] = {  {&_swigt__p_ResultSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Row[] = {  {&_swigt__p_CursorRow, _p_CursorRowTo_p_Row, 0, 0},  {&_swigt__p_Row, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Schema[] = {  {&_swigt__p_Schema, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StrDatum[] = {  {&_swigt__p_StrDatum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StringConvert[] = {  {&_swigt__p_StringConvert, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Table[] = {  {&_swigt__p_Table, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeMap[] = {  {&_swigt__p_TypeMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__type_info[] = {  {&_swigt__p_std__type_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Cursor,
  _swigc__p_CursorRow,
  _swigc__p_DataType,
  _swigc__p_Datum,
  _swigc__p_GreenDb,
  _swigc__p_GreenEnv,
  _swigc__p_IntDatum,
  _swigc__p_ResultSet,
  _swigc__p_Row,
  _swigc__p_Schema,
  _swigc__p_StrDatum,
  _swigc__p_StringConvert,
  _swigc__p_Table,
  _swigc__p_TypeMap,
  _swigc__p_p_char,
  _swigc__p_std__type_info,
  _swigc__p_unsigned_long,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head;
  static int init_run = 0;
  
  clientdata = clientdata;
  
  if (init_run) return;
  init_run = 1;
  
  /* Initialize the swig_module */
  swig_module.type_initial = swig_type_initial;
  swig_module.cast_initial = swig_cast_initial;
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (module_head) {
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  } else {
    /* This is the first module loaded */
    swig_module.next = &swig_module;
    SWIG_SetModule(clientdata, &swig_module);
  }
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


SWIG_GUILE_INIT_STATIC void
SWIG_init(void)
{
  SWIG_InitializeModule(0);
  SWIG_PropagateClientData();
  
  SWIG_TypeClientData(SWIGTYPE_p_GreenDb, (void *) &_swig_guile_clientdataGreenDb);
  scm_c_define_gsubr("new-GreenDb", 3, 0, 0, (swig_guile_proc) _wrap_new_GreenDb);
  ((swig_guile_clientdata *)(SWIGTYPE_p_GreenDb->clientdata))->destroy = (guile_destructor) _wrap_delete_GreenDb;
  scm_c_define_gsubr("delete-GreenDb", 1, 0, 0, (swig_guile_proc) _wrap_delete_GreenDb);
  scm_c_define_gsubr("GreenDb-open-unknown", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_open_unknown);
  scm_c_define_gsubr("GreenDb-open-queue", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_open_queue);
  scm_c_define_gsubr("GreenDb-open-recno", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_open_recno);
  scm_c_define_gsubr("GreenDb-open-hash", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_open_hash);
  scm_c_define_gsubr("GreenDb-open-btree", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_open_btree);
  scm_c_define_gsubr("GreenDb-open", 5, 0, 0, (swig_guile_proc) _wrap_GreenDb_open);
  scm_c_define_gsubr("GreenDb-dbfile", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_dbfile);
  scm_c_define_gsubr("GreenDb-name", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_name);
  scm_c_define_gsubr("GreenDb-put", 3, 0, 0, (swig_guile_proc) _wrap_GreenDb_put);
  scm_c_define_gsubr("GreenDb-fetch", 3, 0, 0, (swig_guile_proc) _wrap_GreenDb_fetch);
  scm_c_define_gsubr("GreenDb-cursor", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_cursor);
  scm_c_define_gsubr("GreenDb-close", 1, 0, 0, (swig_guile_proc) _wrap_GreenDb_close);
  SWIG_TypeClientData(SWIGTYPE_p_GreenEnv, (void *) &_swig_guile_clientdataGreenEnv);
  scm_c_define_gsubr("new-GreenEnv", 1, 0, 0, (swig_guile_proc) _wrap_new_GreenEnv);
  ((swig_guile_clientdata *)(SWIGTYPE_p_GreenEnv->clientdata))->destroy = (guile_destructor) _wrap_delete_GreenEnv;
  scm_c_define_gsubr("delete-GreenEnv", 1, 0, 0, (swig_guile_proc) _wrap_delete_GreenEnv);
  scm_c_define_gsubr("GreenEnv-open", 1, 0, 0, (swig_guile_proc) _wrap_GreenEnv_open);
  scm_c_define_gsubr("GreenEnv-close", 1, 0, 0, (swig_guile_proc) _wrap_GreenEnv_close);
  scm_c_define_gsubr("GreenEnv-home", 1, 0, 0, (swig_guile_proc) _wrap_GreenEnv_home);
  SWIG_TypeClientData(SWIGTYPE_p_Datum, (void *) &_swig_guile_clientdataDatum);
  scm_c_define_gsubr("new-Datum", 0, 0, 0, (swig_guile_proc) _wrap_new_Datum);
  ((swig_guile_clientdata *)(SWIGTYPE_p_Datum->clientdata))->destroy = (guile_destructor) _wrap_delete_Datum;
  scm_c_define_gsubr("delete-Datum", 1, 0, 0, (swig_guile_proc) _wrap_delete_Datum);
  SWIG_TypeClientData(SWIGTYPE_p_StrDatum, (void *) &_swig_guile_clientdataStrDatum);
  scm_c_define_gsubr("new-StrDatum", 1, 0, 0, (swig_guile_proc) _wrap_new_StrDatum);
  scm_c_define_gsubr("StrDatum-type-name", 1, 0, 0, (swig_guile_proc) _wrap_StrDatum_type_name);
  ((swig_guile_clientdata *)(SWIGTYPE_p_StrDatum->clientdata))->destroy = (guile_destructor) _wrap_delete_StrDatum;
  scm_c_define_gsubr("delete-StrDatum", 1, 0, 0, (swig_guile_proc) _wrap_delete_StrDatum);
  scm_c_define_gsubr("StrDatum-repr", 1, 0, 0, (swig_guile_proc) _wrap_StrDatum_repr);
  scm_c_define_gsubr("StrDatum-value", 1, 0, 0, (swig_guile_proc) _wrap_StrDatum_value);
  scm_c_define_gsubr("StrDatum-set-value", 2, 0, 0, (swig_guile_proc) _wrap_StrDatum_set_value);
  SWIG_TypeClientData(SWIGTYPE_p_IntDatum, (void *) &_swig_guile_clientdataIntDatum);
  scm_c_define_gsubr("new-IntDatum", 1, 0, 0, (swig_guile_proc) _wrap_new_IntDatum);
  scm_c_define_gsubr("IntDatum-type-name", 1, 0, 0, (swig_guile_proc) _wrap_IntDatum_type_name);
  ((swig_guile_clientdata *)(SWIGTYPE_p_IntDatum->clientdata))->destroy = (guile_destructor) _wrap_delete_IntDatum;
  scm_c_define_gsubr("delete-IntDatum", 1, 0, 0, (swig_guile_proc) _wrap_delete_IntDatum);
  scm_c_define_gsubr("IntDatum-repr", 1, 0, 0, (swig_guile_proc) _wrap_IntDatum_repr);
  scm_c_define_gsubr("IntDatum-value", 1, 0, 0, (swig_guile_proc) _wrap_IntDatum_value);
  scm_c_define_gsubr("IntDatum-set-value", 2, 0, 0, (swig_guile_proc) _wrap_IntDatum_set_value);
  SWIG_TypeClientData(SWIGTYPE_p_Cursor, (void *) &_swig_guile_clientdataCursor);
  ((swig_guile_clientdata *)(SWIGTYPE_p_Cursor->clientdata))->destroy = (guile_destructor) _wrap_delete_Cursor;
  scm_c_define_gsubr("delete-Cursor", 1, 0, 0, (swig_guile_proc) _wrap_delete_Cursor);
  scm_c_define_gsubr("Cursor-first", 3, 0, 0, (swig_guile_proc) _wrap_Cursor_first);
  scm_c_define_gsubr("Cursor-last", 3, 0, 0, (swig_guile_proc) _wrap_Cursor_last);
  scm_c_define_gsubr("Cursor-find", 3, 0, 0, (swig_guile_proc) _wrap_Cursor_find);
  scm_c_define_gsubr("Cursor-next", 3, 0, 0, (swig_guile_proc) _wrap_Cursor_next);
  scm_c_define_gsubr("Cursor-close", 1, 0, 0, (swig_guile_proc) _wrap_Cursor_close);
  SWIG_TypeClientData(SWIGTYPE_p_Row, (void *) &_swig_guile_clientdataRow);
  scm_c_define_gsubr("new-Row", 2, 0, 0, (swig_guile_proc) _wrap_new_Row);
  ((swig_guile_clientdata *)(SWIGTYPE_p_Row->clientdata))->destroy = (guile_destructor) _wrap_delete_Row;
  scm_c_define_gsubr("delete-Row", 1, 0, 0, (swig_guile_proc) _wrap_delete_Row);
  scm_c_define_gsubr("Row-close", 1, 0, 0, (swig_guile_proc) _wrap_Row_close);
  scm_c_define_gsubr("Row-getpk", 1, 0, 0, (swig_guile_proc) _wrap_Row_getpk);
  scm_c_define_gsubr("Row-set", 3, 0, 0, (swig_guile_proc) _wrap_Row_set);
  scm_c_define_gsubr("Row-from-string", 3, 0, 0, (swig_guile_proc) _wrap_Row_from_string);
  scm_c_define_gsubr("Row-to-string", 2, 0, 0, (swig_guile_proc) _wrap_Row_to_string);
  scm_c_define_gsubr("Row-get-column", 2, 0, 0, (swig_guile_proc) _wrap_Row_get_column);
  scm_c_define_gsubr("Row-get-col-no", 2, 0, 0, (swig_guile_proc) _wrap_Row_get_col_no);
  scm_c_define_gsubr("Row-get-existing-column", 2, 0, 0, (swig_guile_proc) _wrap_Row_get_existing_column);
  scm_c_define_gsubr("Row-size", 1, 0, 0, (swig_guile_proc) _wrap_Row_size);
  SWIG_TypeClientData(SWIGTYPE_p_Table, (void *) &_swig_guile_clientdataTable);
  scm_c_define_gsubr("new-Table", 2, 0, 0, (swig_guile_proc) _wrap_new_Table);
  scm_c_define_gsubr("Table-get-schema", 1, 0, 0, (swig_guile_proc) _wrap_Table_get_schema);
  scm_c_define_gsubr("Table-close", 1, 0, 0, (swig_guile_proc) _wrap_Table_close);
  ((swig_guile_clientdata *)(SWIGTYPE_p_Table->clientdata))->destroy = (guile_destructor) _wrap_delete_Table;
  scm_c_define_gsubr("delete-Table", 1, 0, 0, (swig_guile_proc) _wrap_delete_Table);
  scm_c_define_gsubr("Table-save", 2, 0, 0, (swig_guile_proc) _wrap_Table_save);
  scm_c_define_gsubr("Table-fetch", 3, 0, 0, (swig_guile_proc) _wrap_Table_fetch);
  scm_c_define_gsubr("Table-new-row", 1, 0, 0, (swig_guile_proc) _wrap_Table_new_row);
  scm_c_define_gsubr("Table-get-database", 2, 0, 0, (swig_guile_proc) _wrap_Table_get_database);
  scm_c_define_gsubr("Table-get-index", 2, 0, 0, (swig_guile_proc) _wrap_Table_get_index);
  scm_c_define_gsubr("Table-first", 2, 0, 0, (swig_guile_proc) _wrap_Table_first);
  scm_c_define_gsubr("Table-last", 2, 0, 0, (swig_guile_proc) _wrap_Table_last);
  scm_c_define_gsubr("Table-cursor", 2, 0, 0, (swig_guile_proc) _wrap_Table_cursor);
  scm_c_define_gsubr("Table-find-all", 3, 0, 0, (swig_guile_proc) _wrap_Table_find_all);
  scm_c_define_gsubr("Table-next", 0, 0, 1, (swig_guile_proc) _wrap_Table_next);
  scm_c_define_gsubr("Table-get-col-name", 2, 0, 0, (swig_guile_proc) _wrap_Table_get_col_name);
  scm_c_define_gsubr("Table-get-name", 1, 0, 0, (swig_guile_proc) _wrap_Table_get_name);
  scm_c_define_gsubr("Table-exists", 1, 0, 0, (swig_guile_proc) _wrap_Table_exists);
  SWIG_TypeClientData(SWIGTYPE_p_Schema, (void *) &_swig_guile_clientdataSchema);
  scm_c_define_gsubr("Schema-add-column", 4, 0, 0, (swig_guile_proc) _wrap_Schema_add_column);
  scm_c_define_gsubr("Schema-add-columns", 4, 0, 0, (swig_guile_proc) _wrap_Schema_add_columns);
  scm_c_define_gsubr("Schema-get-type", 2, 0, 0, (swig_guile_proc) _wrap_Schema_get_type);
  scm_c_define_gsubr("Schema-get-col-no", 2, 0, 0, (swig_guile_proc) _wrap_Schema_get_col_no);
  scm_c_define_gsubr("Schema-get-name", 2, 0, 0, (swig_guile_proc) _wrap_Schema_get_name);
  scm_c_define_gsubr("Schema-size", 1, 0, 0, (swig_guile_proc) _wrap_Schema_size);
  ((swig_guile_clientdata *)(SWIGTYPE_p_Schema->clientdata))->destroy = (guile_destructor) _wrap_delete_Schema;
  scm_c_define_gsubr("delete-Schema", 1, 0, 0, (swig_guile_proc) _wrap_delete_Schema);
  SWIG_TypeClientData(SWIGTYPE_p_TypeMap, (void *) &_swig_guile_clientdataTypeMap);
  scm_c_define_gsubr("TypeMap-get-type-map", 0, 0, 0, (swig_guile_proc) _wrap_TypeMap_get_type_map);
  scm_c_define_gsubr("TypeMap-add-string-convert", 3, 0, 0, (swig_guile_proc) _wrap_TypeMap_add_string_convert);
  scm_c_define_gsubr("TypeMap-to-string", 3, 0, 0, (swig_guile_proc) _wrap_TypeMap_to_string);
  scm_c_define_gsubr("TypeMap-from-string", 4, 0, 0, (swig_guile_proc) _wrap_TypeMap_from_string);
  scm_c_define_gsubr("TypeMap-from-string-size", 3, 0, 0, (swig_guile_proc) _wrap_TypeMap_from_string_size);
  scm_c_define_gsubr("TypeMap-get-type-id", 2, 0, 0, (swig_guile_proc) _wrap_TypeMap_get_type_id);
  scm_c_define_gsubr("TypeMap-get-type-name", 2, 0, 0, (swig_guile_proc) _wrap_TypeMap_get_type_name);
  ((swig_guile_clientdata *)(SWIGTYPE_p_TypeMap->clientdata))->destroy = (guile_destructor) _wrap_delete_TypeMap;
  scm_c_define_gsubr("delete-TypeMap", 1, 0, 0, (swig_guile_proc) _wrap_delete_TypeMap);
  scm_c_define_gsubr("TYPE-UNDEFINED", 0, 0, 0, (swig_guile_proc) _wrap_TYPE_UNDEFINED);
  scm_c_define_gsubr("TYPE-USER", 0, 0, 0, (swig_guile_proc) _wrap_TYPE_USER);
  scm_c_define_gsubr("TYPE-STRING", 0, 0, 0, (swig_guile_proc) _wrap_TYPE_STRING);
  scm_c_define_gsubr("TYPE-INT", 0, 0, 0, (swig_guile_proc) _wrap_TYPE_INT);
  scm_c_define_gsubr("TYPE-END", 0, 0, 0, (swig_guile_proc) _wrap_TYPE_END);
  SWIG_TypeClientData(SWIGTYPE_p_CursorRow, (void *) &_swig_guile_clientdataCursorRow);
  scm_c_define_gsubr("new-CursorRow", 4, 0, 0, (swig_guile_proc) _wrap_new_CursorRow);
  scm_c_define_gsubr("CursorRow-get-cursor", 1, 0, 0, (swig_guile_proc) _wrap_CursorRow_get_cursor);
  ((swig_guile_clientdata *)(SWIGTYPE_p_CursorRow->clientdata))->destroy = (guile_destructor) _wrap_delete_CursorRow;
  scm_c_define_gsubr("delete-CursorRow", 1, 0, 0, (swig_guile_proc) _wrap_delete_CursorRow);
}

#ifdef __cplusplus
}
#endif
extern "C" {
/* Linkage: simple */

}

