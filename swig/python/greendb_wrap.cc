/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink(void);
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_Schema swig_types[0] 
#define  SWIGTYPE_p_Datum swig_types[1] 
#define  SWIGTYPE_p_IntDatum swig_types[2] 
#define  SWIGTYPE_p_CursorRow swig_types[3] 
#define  SWIGTYPE_p_TypeMap swig_types[4] 
#define  SWIGTYPE_p_Row swig_types[5] 
#define  SWIGTYPE_p_GreenEnv swig_types[6] 
#define  SWIGTYPE_p_GreenDb swig_types[7] 
#define  SWIGTYPE_p_StrDatum swig_types[8] 
#define  SWIGTYPE_p_size_t swig_types[9] 
#define  SWIGTYPE_p_Cursor swig_types[10] 
#define  SWIGTYPE_p_Table swig_types[11] 
static swig_type_info *swig_types[13];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _greendb.so
  ------------------------------------------------*/
#define SWIG_init    init_greendb

#define SWIG_name    "_greendb"

#include <db_cxx.h>
#include "greendb/greendb.hh"
#include "greendb/datum.hh"
#include "greendb/strdatum.hh"
#include "greendb/greenenv.hh"
#include "greendb/row.hh"
#include "greendb/table.hh"
#include "greendb/cursor.hh"
#include "greendb/typemap.hh"
#include "greendb/schema.hh"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_GreenDb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    char *arg2 ;
    char *arg3 ;
    GreenDb *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:new_GreenDb",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenEnv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (GreenDb *)new GreenDb(arg1,(char const *)arg2,(char const *)arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_GreenDb, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GreenDb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GreenDb",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_open(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oiii:GreenDb_open",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->open(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_open_unknown(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_open_unknown",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->open_unknown();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_open_queue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_open_queue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->open_queue();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_open_recno(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_open_recno",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->open_recno();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_open_hash(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_open_hash",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->open_hash();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_open_btree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_open_btree",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->open_btree();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_dbfile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_dbfile",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((GreenDb const *)arg1)->dbfile();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((GreenDb const *)arg1)->name();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_put(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:GreenDb_put",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->put(*arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_fetch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:GreenDb_fetch",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->fetch(*arg2,*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_cursor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    Cursor *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_cursor",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Cursor *)(arg1)->cursor();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Cursor, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenDb_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenDb *arg1 = (GreenDb *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenDb_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenDb,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->close();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GreenDb_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GreenDb, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_GreenEnv(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    GreenEnv *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_GreenEnv",&arg1)) goto fail;
    result = (GreenEnv *)new GreenEnv((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_GreenEnv, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_GreenEnv(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_GreenEnv",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenEnv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenEnv_open(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenEnv_open",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenEnv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->open();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenEnv_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenEnv_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenEnv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->close();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_GreenEnv_home(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:GreenEnv_home",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_GreenEnv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->home();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject * GreenEnv_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GreenEnv, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Datum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Datum *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Datum")) goto fail;
    result = (Datum *)new Datum();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Datum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Datum *arg1 = (Datum *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Datum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Datum_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Datum, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_StrDatum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    StrDatum *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_StrDatum",&arg1)) goto fail;
    result = (StrDatum *)new StrDatum(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_StrDatum, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StrDatum_type_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StrDatum_type_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_StrDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((StrDatum const *)arg1)->type_name();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_StrDatum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    StrDatum *arg1 = (StrDatum *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_StrDatum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_StrDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StrDatum_repr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StrDatum_repr",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_StrDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((StrDatum const *)arg1)->repr();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StrDatum_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:StrDatum_value",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_StrDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->value();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_StrDatum_set_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:StrDatum_set_value",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_StrDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->set_value(arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StrDatum_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_StrDatum, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IntDatum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    IntDatum *result;
    
    if(!PyArg_ParseTuple(args,(char *)"i:new_IntDatum",&arg1)) goto fail;
    result = (IntDatum *)new IntDatum(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IntDatum, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntDatum_type_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IntDatum *arg1 = (IntDatum *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IntDatum_type_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IntDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((IntDatum const *)arg1)->type_name();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IntDatum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IntDatum *arg1 = (IntDatum *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IntDatum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IntDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntDatum_repr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IntDatum *arg1 = (IntDatum *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IntDatum_repr",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IntDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((IntDatum const *)arg1)->repr();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntDatum_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IntDatum *arg1 = (IntDatum *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IntDatum_value",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IntDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->value();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IntDatum_set_value(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IntDatum *arg1 = (IntDatum *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IntDatum_set_value",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IntDatum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->set_value(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IntDatum_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IntDatum, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Cursor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Cursor *arg1 = (Cursor *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Cursor",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursor_first(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Cursor_first",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->first(*arg2,*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursor_last(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Cursor_last",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->last(*arg2,*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursor_find(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Cursor_find",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->find(*arg2,*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursor_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Cursor_next",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)(arg1)->next(*arg2,*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Cursor_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Cursor *arg1 = (Cursor *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Cursor_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->close();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Cursor_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Cursor, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Row(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    size_t arg2 ;
    Row *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Row",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (size_t) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (Row *)new Row(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Row, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Row(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Row",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Row_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->close();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_getpk(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    Datum *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Row_getpk",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Datum &_result_ref = (arg1)->getpk();
        result = (Datum *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_set_n(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:Row_set_n",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->set(arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:Row_set",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->set((char const *)arg2,*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_from_string_n(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    char *arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ois:Row_from_string_n",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->from_string(arg2,(char const *)arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_from_string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    char *arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:Row_from_string",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->from_string((char const *)arg2,(char const *)arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_to_string_n(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Row_to_string_n",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->to_string(arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_to_string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Row_to_string",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)(arg1)->to_string((char const *)arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_get_column_n(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Row_get_column_n",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Datum *)(arg1)->get_column(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_get_column(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    Datum *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Row_get_column",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Datum *)(arg1)->get_column((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_get_col_no(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Row_get_col_no",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->get_col_no((char const *)arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_get_existing_column(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Row_get_existing_column",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Datum *)(arg1)->get_existing_column(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Row_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Row *arg1 = (Row *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Row_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Row_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Row, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    GreenEnv *arg2 = 0 ;
    Table *result;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:new_Table",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_GreenEnv,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (Table *)new Table((char const *)arg1,*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Table, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_get_schema(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    Schema *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_get_schema",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Schema *)(arg1)->get_schema();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Schema, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->close();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Table",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_get_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_get_name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((Table const *)arg1)->get_name();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    Row *arg2 = (Row *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_save",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_Row,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->save(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_index(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    Datum *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsOO:Table_index",&obj0,&arg2,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg4 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->index((char const *)arg2,*arg3,*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_fetch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    Row *result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:Table_fetch",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (Row *)(arg1)->fetch((char const *)arg2,*arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Row, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_new_row(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    Row *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_new_row",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Row *)(arg1)->new_row();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Row, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_cursor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Cursor *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Table_cursor",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Cursor *)(arg1)->cursor((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Cursor, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_first(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    CursorRow *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Table_first",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (CursorRow *)(arg1)->first((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CursorRow, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_last(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    CursorRow *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Table_last",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (CursorRow *)(arg1)->last((char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CursorRow, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    CursorRow *arg2 = (CursorRow *) 0 ;
    char *arg3 ;
    CursorRow *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:Table_next",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_CursorRow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (CursorRow *)(arg1)->next(arg2,(char const *)arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CursorRow, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_get_col_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    int arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Table_get_col_name",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((Table const *)arg1)->get_col_name(arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Table_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Table, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Schema_add_column(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int arg3 ;
    bool arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsiO:Schema_add_column",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Schema,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg4 = PyInt_AsLong(obj3) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->add_column((char const *)arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Schema_get_type_n(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Schema *arg1 = (Schema *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Schema_get_type_n",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Schema,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((Schema const *)arg1)->get_type(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Schema_get_type(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Schema_get_type",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Schema,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((Schema const *)arg1)->get_type((char const *)arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Schema_get_col_no(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Schema_get_col_no",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Schema,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((Schema const *)arg1)->get_col_no((char const *)arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Schema_get_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Schema *arg1 = (Schema *) 0 ;
    int arg2 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Schema_get_name",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Schema,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((Schema const *)arg1)->get_name(arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Schema_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Schema *arg1 = (Schema *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Schema_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Schema,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((Schema const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Schema(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Schema *arg1 = (Schema *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Schema",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Schema,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Schema_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Schema, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_TypeMap_get_type_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TypeMap *result;
    
    if(!PyArg_ParseTuple(args,(char *)":TypeMap_get_type_map")) goto fail;
    result = (TypeMap *)TypeMap::get_type_map();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TypeMap, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TypeMap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TypeMap *arg1 = (TypeMap *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TypeMap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TypeMap,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TypeMap_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TypeMap, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CursorRow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    Table *arg1 = (Table *) 0 ;
    size_t arg2 ;
    Cursor *arg3 = (Cursor *) 0 ;
    char *arg4 ;
    Datum *arg5 = (Datum *) 0 ;
    CursorRow *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOsO:new_CursorRow",&obj0,&obj1,&obj2,&arg4,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (size_t) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_Cursor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg5, SWIGTYPE_p_Datum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (CursorRow *)new CursorRow(arg1,arg2,arg3,(char const *)arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CursorRow, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CursorRow_get_cursor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CursorRow *arg1 = (CursorRow *) 0 ;
    Cursor *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CursorRow_get_cursor",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CursorRow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (Cursor *)(arg1)->get_cursor();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Cursor, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CursorRow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CursorRow *arg1 = (CursorRow *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CursorRow",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CursorRow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CursorRow_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CursorRow, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_GreenDb", _wrap_new_GreenDb, METH_VARARGS },
	 { (char *)"delete_GreenDb", _wrap_delete_GreenDb, METH_VARARGS },
	 { (char *)"GreenDb_open", _wrap_GreenDb_open, METH_VARARGS },
	 { (char *)"GreenDb_open_unknown", _wrap_GreenDb_open_unknown, METH_VARARGS },
	 { (char *)"GreenDb_open_queue", _wrap_GreenDb_open_queue, METH_VARARGS },
	 { (char *)"GreenDb_open_recno", _wrap_GreenDb_open_recno, METH_VARARGS },
	 { (char *)"GreenDb_open_hash", _wrap_GreenDb_open_hash, METH_VARARGS },
	 { (char *)"GreenDb_open_btree", _wrap_GreenDb_open_btree, METH_VARARGS },
	 { (char *)"GreenDb_dbfile", _wrap_GreenDb_dbfile, METH_VARARGS },
	 { (char *)"GreenDb_name", _wrap_GreenDb_name, METH_VARARGS },
	 { (char *)"GreenDb_put", _wrap_GreenDb_put, METH_VARARGS },
	 { (char *)"GreenDb_fetch", _wrap_GreenDb_fetch, METH_VARARGS },
	 { (char *)"GreenDb_cursor", _wrap_GreenDb_cursor, METH_VARARGS },
	 { (char *)"GreenDb_close", _wrap_GreenDb_close, METH_VARARGS },
	 { (char *)"GreenDb_swigregister", GreenDb_swigregister, METH_VARARGS },
	 { (char *)"new_GreenEnv", _wrap_new_GreenEnv, METH_VARARGS },
	 { (char *)"delete_GreenEnv", _wrap_delete_GreenEnv, METH_VARARGS },
	 { (char *)"GreenEnv_open", _wrap_GreenEnv_open, METH_VARARGS },
	 { (char *)"GreenEnv_close", _wrap_GreenEnv_close, METH_VARARGS },
	 { (char *)"GreenEnv_home", _wrap_GreenEnv_home, METH_VARARGS },
	 { (char *)"GreenEnv_swigregister", GreenEnv_swigregister, METH_VARARGS },
	 { (char *)"new_Datum", _wrap_new_Datum, METH_VARARGS },
	 { (char *)"delete_Datum", _wrap_delete_Datum, METH_VARARGS },
	 { (char *)"Datum_swigregister", Datum_swigregister, METH_VARARGS },
	 { (char *)"new_StrDatum", _wrap_new_StrDatum, METH_VARARGS },
	 { (char *)"StrDatum_type_name", _wrap_StrDatum_type_name, METH_VARARGS },
	 { (char *)"delete_StrDatum", _wrap_delete_StrDatum, METH_VARARGS },
	 { (char *)"StrDatum_repr", _wrap_StrDatum_repr, METH_VARARGS },
	 { (char *)"StrDatum_value", _wrap_StrDatum_value, METH_VARARGS },
	 { (char *)"StrDatum_set_value", _wrap_StrDatum_set_value, METH_VARARGS },
	 { (char *)"StrDatum_swigregister", StrDatum_swigregister, METH_VARARGS },
	 { (char *)"new_IntDatum", _wrap_new_IntDatum, METH_VARARGS },
	 { (char *)"IntDatum_type_name", _wrap_IntDatum_type_name, METH_VARARGS },
	 { (char *)"delete_IntDatum", _wrap_delete_IntDatum, METH_VARARGS },
	 { (char *)"IntDatum_repr", _wrap_IntDatum_repr, METH_VARARGS },
	 { (char *)"IntDatum_value", _wrap_IntDatum_value, METH_VARARGS },
	 { (char *)"IntDatum_set_value", _wrap_IntDatum_set_value, METH_VARARGS },
	 { (char *)"IntDatum_swigregister", IntDatum_swigregister, METH_VARARGS },
	 { (char *)"delete_Cursor", _wrap_delete_Cursor, METH_VARARGS },
	 { (char *)"Cursor_first", _wrap_Cursor_first, METH_VARARGS },
	 { (char *)"Cursor_last", _wrap_Cursor_last, METH_VARARGS },
	 { (char *)"Cursor_find", _wrap_Cursor_find, METH_VARARGS },
	 { (char *)"Cursor_next", _wrap_Cursor_next, METH_VARARGS },
	 { (char *)"Cursor_close", _wrap_Cursor_close, METH_VARARGS },
	 { (char *)"Cursor_swigregister", Cursor_swigregister, METH_VARARGS },
	 { (char *)"new_Row", _wrap_new_Row, METH_VARARGS },
	 { (char *)"delete_Row", _wrap_delete_Row, METH_VARARGS },
	 { (char *)"Row_close", _wrap_Row_close, METH_VARARGS },
	 { (char *)"Row_getpk", _wrap_Row_getpk, METH_VARARGS },
	 { (char *)"Row_set_n", _wrap_Row_set_n, METH_VARARGS },
	 { (char *)"Row_set", _wrap_Row_set, METH_VARARGS },
	 { (char *)"Row_from_string_n", _wrap_Row_from_string_n, METH_VARARGS },
	 { (char *)"Row_from_string", _wrap_Row_from_string, METH_VARARGS },
	 { (char *)"Row_to_string_n", _wrap_Row_to_string_n, METH_VARARGS },
	 { (char *)"Row_to_string", _wrap_Row_to_string, METH_VARARGS },
	 { (char *)"Row_get_column_n", _wrap_Row_get_column_n, METH_VARARGS },
	 { (char *)"Row_get_column", _wrap_Row_get_column, METH_VARARGS },
	 { (char *)"Row_get_col_no", _wrap_Row_get_col_no, METH_VARARGS },
	 { (char *)"Row_get_existing_column", _wrap_Row_get_existing_column, METH_VARARGS },
	 { (char *)"Row_size", _wrap_Row_size, METH_VARARGS },
	 { (char *)"Row_swigregister", Row_swigregister, METH_VARARGS },
	 { (char *)"new_Table", _wrap_new_Table, METH_VARARGS },
	 { (char *)"Table_get_schema", _wrap_Table_get_schema, METH_VARARGS },
	 { (char *)"Table_close", _wrap_Table_close, METH_VARARGS },
	 { (char *)"delete_Table", _wrap_delete_Table, METH_VARARGS },
	 { (char *)"Table_get_name", _wrap_Table_get_name, METH_VARARGS },
	 { (char *)"Table_save", _wrap_Table_save, METH_VARARGS },
	 { (char *)"Table_index", _wrap_Table_index, METH_VARARGS },
	 { (char *)"Table_fetch", _wrap_Table_fetch, METH_VARARGS },
	 { (char *)"Table_new_row", _wrap_Table_new_row, METH_VARARGS },
	 { (char *)"Table_cursor", _wrap_Table_cursor, METH_VARARGS },
	 { (char *)"Table_first", _wrap_Table_first, METH_VARARGS },
	 { (char *)"Table_last", _wrap_Table_last, METH_VARARGS },
	 { (char *)"Table_next", _wrap_Table_next, METH_VARARGS },
	 { (char *)"Table_get_col_name", _wrap_Table_get_col_name, METH_VARARGS },
	 { (char *)"Table_swigregister", Table_swigregister, METH_VARARGS },
	 { (char *)"Schema_add_column", _wrap_Schema_add_column, METH_VARARGS },
	 { (char *)"Schema_get_type_n", _wrap_Schema_get_type_n, METH_VARARGS },
	 { (char *)"Schema_get_type", _wrap_Schema_get_type, METH_VARARGS },
	 { (char *)"Schema_get_col_no", _wrap_Schema_get_col_no, METH_VARARGS },
	 { (char *)"Schema_get_name", _wrap_Schema_get_name, METH_VARARGS },
	 { (char *)"Schema_size", _wrap_Schema_size, METH_VARARGS },
	 { (char *)"delete_Schema", _wrap_delete_Schema, METH_VARARGS },
	 { (char *)"Schema_swigregister", Schema_swigregister, METH_VARARGS },
	 { (char *)"TypeMap_get_type_map", _wrap_TypeMap_get_type_map, METH_VARARGS },
	 { (char *)"delete_TypeMap", _wrap_delete_TypeMap, METH_VARARGS },
	 { (char *)"TypeMap_swigregister", TypeMap_swigregister, METH_VARARGS },
	 { (char *)"new_CursorRow", _wrap_new_CursorRow, METH_VARARGS },
	 { (char *)"CursorRow_get_cursor", _wrap_CursorRow_get_cursor, METH_VARARGS },
	 { (char *)"delete_CursorRow", _wrap_delete_CursorRow, METH_VARARGS },
	 { (char *)"CursorRow_swigregister", CursorRow_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CursorRowTo_p_Row(void *x) {
    return (void *)((Row *)  ((CursorRow *) x));
}
static void *_p_IntDatumTo_p_Datum(void *x) {
    return (void *)((Datum *)  ((IntDatum *) x));
}
static void *_p_StrDatumTo_p_Datum(void *x) {
    return (void *)((Datum *)  ((StrDatum *) x));
}
static swig_type_info _swigt__p_Schema[] = {{"_p_Schema", 0, "Schema *", 0},{"_p_Schema"},{0}};
static swig_type_info _swigt__p_Datum[] = {{"_p_Datum", 0, "Datum *", 0},{"_p_Datum"},{"_p_IntDatum", _p_IntDatumTo_p_Datum},{"_p_StrDatum", _p_StrDatumTo_p_Datum},{0}};
static swig_type_info _swigt__p_IntDatum[] = {{"_p_IntDatum", 0, "IntDatum *", 0},{"_p_IntDatum"},{0}};
static swig_type_info _swigt__p_CursorRow[] = {{"_p_CursorRow", 0, "CursorRow *", 0},{"_p_CursorRow"},{0}};
static swig_type_info _swigt__p_TypeMap[] = {{"_p_TypeMap", 0, "TypeMap *", 0},{"_p_TypeMap"},{0}};
static swig_type_info _swigt__p_Row[] = {{"_p_Row", 0, "Row *", 0},{"_p_CursorRow", _p_CursorRowTo_p_Row},{"_p_Row"},{0}};
static swig_type_info _swigt__p_GreenEnv[] = {{"_p_GreenEnv", 0, "GreenEnv *", 0},{"_p_GreenEnv"},{0}};
static swig_type_info _swigt__p_GreenDb[] = {{"_p_GreenDb", 0, "GreenDb *", 0},{"_p_GreenDb"},{0}};
static swig_type_info _swigt__p_StrDatum[] = {{"_p_StrDatum", 0, "StrDatum *", 0},{"_p_StrDatum"},{0}};
static swig_type_info _swigt__p_size_t[] = {{"_p_size_t", 0, "size_t *", 0},{"_p_size_t"},{0}};
static swig_type_info _swigt__p_Cursor[] = {{"_p_Cursor", 0, "Cursor *", 0},{"_p_Cursor"},{0}};
static swig_type_info _swigt__p_Table[] = {{"_p_Table", 0, "Table *", 0},{"_p_Table"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_Schema, 
_swigt__p_Datum, 
_swigt__p_IntDatum, 
_swigt__p_CursorRow, 
_swigt__p_TypeMap, 
_swigt__p_Row, 
_swigt__p_GreenEnv, 
_swigt__p_GreenDb, 
_swigt__p_StrDatum, 
_swigt__p_size_t, 
_swigt__p_Cursor, 
_swigt__p_Table, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"TypeMap_UNDEFINED", (long) TypeMap::UNDEFINED, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_USER", (long) TypeMap::USER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_STRING", (long) TypeMap::STRING, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_WSTRING", (long) TypeMap::WSTRING, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_INT", (long) TypeMap::INT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_SHORT", (long) TypeMap::SHORT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_LONG", (long) TypeMap::LONG, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_DOUBLE", (long) TypeMap::DOUBLE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_UINT", (long) TypeMap::UINT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_USHORT", (long) TypeMap::USHORT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_ULONG", (long) TypeMap::ULONG, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_CHAR", (long) TypeMap::CHAR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_WCHAR", (long) TypeMap::WCHAR, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"TypeMap_BOOL", (long) TypeMap::BOOL, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

