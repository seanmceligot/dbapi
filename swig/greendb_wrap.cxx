/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.22
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif

/* ruby.swg */
/* Implementation : RUBY */
#define SWIGRUBY 1

#include "ruby.h"

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

#define NUM2USHRT(n) (\
    (0 <= NUM2UINT(n) && NUM2UINT(n) <= USHRT_MAX)\
    ? (unsigned short) NUM2UINT(n) \
    : (rb_raise(rb_eArgError, "integer %d out of range of `unsigned short'",\
               NUM2UINT(n)), (short)0)\
)

#define NUM2SHRT(n) (\
    (SHRT_MIN <= NUM2INT(n) && NUM2INT(n) <= SHRT_MAX)\
    ? (short)NUM2INT(n)\
    : (rb_raise(rb_eArgError, "integer %d out of range of `short'",\
               NUM2INT(n)), (short)0)\
)

/* Ruby 1.7 defines NUM2LL(), LL2NUM() and ULL2NUM() macros */
#ifndef NUM2LL
#define NUM2LL(x) NUM2LONG((x))
#endif
#ifndef LL2NUM
#define LL2NUM(x) INT2NUM((long) (x))
#endif
#ifndef ULL2NUM
#define ULL2NUM(x) UINT2NUM((unsigned long) (x))
#endif

/* Ruby 1.7 doesn't (yet) define NUM2ULL() */
#ifndef NUM2ULL
#ifdef HAVE_LONG_LONG
#define NUM2ULL(x) rb_num2ull((x))
#else
#define NUM2ULL(x) NUM2ULONG(x)
#endif
#endif

/*
 * Need to be very careful about how these macros are defined, especially
 * when compiling C++ code or C code with an ANSI C compiler.
 *
 * VALUEFUNC(f) is a macro used to typecast a C function that implements
 * a Ruby method so that it can be passed as an argument to API functions
 * like rb_define_method() and rb_define_singleton_method().
 *
 * VOIDFUNC(f) is a macro used to typecast a C function that implements
 * either the "mark" or "free" stuff for a Ruby Data object, so that it
 * can be passed as an argument to API functions like Data_Wrap_Struct()
 * and Data_Make_Struct().
 */
 
#ifdef __cplusplus
#  ifndef RUBY_METHOD_FUNC /* These definitions should work for Ruby 1.4.6 */
#    define PROTECTFUNC(f) ((VALUE (*)()) f)
#    define VALUEFUNC(f) ((VALUE (*)()) f)
#    define VOIDFUNC(f)  ((void (*)()) f)
#  else
#    ifndef ANYARGS /* These definitions should work for Ruby 1.6 */
#      define PROTECTFUNC(f) ((VALUE (*)()) f)
#      define VALUEFUNC(f) ((VALUE (*)()) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    else /* These definitions should work for Ruby 1.7+ */
#      define PROTECTFUNC(f) ((VALUE (*)(VALUE)) f)
#      define VALUEFUNC(f) ((VALUE (*)(ANYARGS)) f)
#      define VOIDFUNC(f)  ((RUBY_DATA_FUNC) f)
#    endif
#  endif
#else
#  define VALUEFUNC(f) (f)
#  define VOIDFUNC(f) (f)
#endif

typedef struct {
  VALUE klass;
  VALUE mImpl;
  void  (*mark)(void *);
  void  (*destroy)(void *);
} swig_class;

/* Don't use for expressions have side effect */
#ifndef RB_STRING_VALUE
#define RB_STRING_VALUE(s) (TYPE(s) == T_STRING ? (s) : (*(volatile VALUE *)&(s) = rb_str_to_str(s)))
#endif
#ifndef StringValue
#define StringValue(s) RB_STRING_VALUE(s)
#endif
#ifndef StringValuePtr
#define StringValuePtr(s) RSTRING(RB_STRING_VALUE(s))->ptr
#endif
#ifndef StringValueLen
#define StringValueLen(s) RSTRING(RB_STRING_VALUE(s))->len
#endif
#ifndef SafeStringValue
#define SafeStringValue(v) do {\
    StringValue(v);\
    rb_check_safe_str(v);\
} while (0)
#endif

#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
#define rb_define_alloc_func(klass, func) rb_define_singleton_method((klass), "new", VALUEFUNC((func)), -1)
#define rb_undef_alloc_func(klass) rb_undef_method(CLASS_OF((klass)), "new")
#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { rb_raise(rb_eRuntimeError, (char *) msg ); } else


/*************************************************************** -*- c -*-
 * ruby/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Ruby_TypeRegister
#define SWIG_TypeCheck       SWIG_Ruby_TypeCheck
#define SWIG_TypeCast        SWIG_Ruby_TypeCast
#define SWIG_TypeDynamicCast SWIG_Ruby_TypeDynamicCast
#define SWIG_TypeName        SWIG_Ruby_TypeName
#define SWIG_TypePrettyName  SWIG_Ruby_TypePrettyName
#define SWIG_TypeQuery       SWIG_Ruby_TypeQuery
#define SWIG_TypeClientData  SWIG_Ruby_TypeClientData
#define SWIG_PackData        SWIG_Ruby_PackData 
#define SWIG_UnpackData      SWIG_Ruby_UnpackData 

/* Also rename all exported symbols from rubydef.swig */

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Ruby_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Ruby_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Ruby_MustGetPtr(p, type, argnum, flags)

/* Ruby-specific SWIG API */

#define SWIG_InitRuntime() \
  SWIG_Ruby_InitRuntime()
#define SWIG_define_class(ty) \
  SWIG_Ruby_define_class(ty)
#define SWIG_NewClassInstance(value, ty) \
  SWIG_Ruby_NewClassInstance(value, ty)
#define SWIG_MangleStr(value) \
  SWIG_Ruby_MangleStr(value)
#define SWIG_CheckConvert(value, ty) \
  SWIG_Ruby_CheckConvert(value, ty)
#define SWIG_NewPackedObj(ptr, sz, ty) \
  SWIG_Ruby_NewPackedObj(ptr, sz, ty)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Ruby_ConvertPacked(obj, ptr, sz, ty, flags)


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(const char *)     SWIG_TypePrettyName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;
static swig_type_info **swig_type_list_handle = &swig_type_list;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = *swig_type_list_handle;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = *swig_type_list_handle;
  *swig_type_list_handle = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Return the pretty name associated with this type,
   that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME(const char *)
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Compare two type names skipping the space characters, therefore
   "char*" == "char *" and "Class<int>" == "Class<int >", etc.

   Return 0 when the two name types are equivalent, as in
   strncmp, but skipping ' '.
*/
static int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return *f1 - *f2;
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
*/
static int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te) == 0;
    if (*ne) ++ne;
  }
  return equiv;
}
  

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = *swig_type_list_handle;
  while (ty) {
    if (ty->str && (SWIG_TypeEquiv(ty->str,name))) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = *swig_type_list_handle;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  register unsigned char uu;
  for (; u != eu; ++u) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/* rubydef.swg */
#ifdef __cplusplus
extern "C" {
#endif

static VALUE _mSWIG = Qnil;
static VALUE _cSWIG_Pointer = Qnil;

/* Initialize Ruby runtime support */
SWIGRUNTIME(void)
SWIG_Ruby_InitRuntime(void)
{
    if (_mSWIG == Qnil) {
        _mSWIG = rb_define_module("SWIG");
    }
}

/* Define Ruby class for C type */
SWIGRUNTIME(void)
SWIG_Ruby_define_class(swig_type_info *type)
{
    VALUE klass;
    char *klass_name = (char *) malloc(4 + strlen(type->name) + 1);
    sprintf(klass_name, "TYPE%s", type->name);
    if (NIL_P(_cSWIG_Pointer)) {
	_cSWIG_Pointer = rb_define_class_under(_mSWIG, "Pointer", rb_cObject);
	rb_undef_method(CLASS_OF(_cSWIG_Pointer), "new");
    }
    klass = rb_define_class_under(_mSWIG, klass_name, _cSWIG_Pointer);
    free((void *) klass_name);
}

/* Create a new pointer object */
SWIGRUNTIME(VALUE)
SWIG_Ruby_NewPointerObj(void *ptr, swig_type_info *type, int own)
{
    char *klass_name;
    swig_class *sklass;
    VALUE klass;
    VALUE obj;
    
    if (!ptr)
	return Qnil;
    
    if (type->clientdata) {
      sklass = (swig_class *) type->clientdata;
      obj = Data_Wrap_Struct(sklass->klass, VOIDFUNC(sklass->mark), (own ? VOIDFUNC(sklass->destroy) : 0), ptr);
    } else {
      klass_name = (char *) malloc(4 + strlen(type->name) + 1);
      sprintf(klass_name, "TYPE%s", type->name);
      klass = rb_const_get(_mSWIG, rb_intern(klass_name));
      free((void *) klass_name);
      obj = Data_Wrap_Struct(klass, 0, 0, ptr);
    }
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Create a new class instance (always owned) */
SWIGRUNTIME(VALUE)
SWIG_Ruby_NewClassInstance(VALUE klass, swig_type_info *type)
{
    VALUE obj;
    swig_class *sklass = (swig_class *) type->clientdata;
    obj = Data_Wrap_Struct(klass, VOIDFUNC(sklass->mark), VOIDFUNC(sklass->destroy), 0);
    rb_iv_set(obj, "__swigtype__", rb_str_new2(type->name));
    return obj;
}

/* Get type mangle from class name */
SWIGRUNTIME(char *)
SWIG_Ruby_MangleStr(VALUE obj)
{
  VALUE stype = rb_iv_get(obj, "__swigtype__");
  return StringValuePtr(stype);
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Ruby_ConvertPtr(VALUE obj, void **ptr, swig_type_info *ty, int flags)
{
  char *c;
  swig_type_info *tc;

  /* Grab the pointer */
  if (NIL_P(obj)) {
    *ptr = 0;
    return 0;
  } else {
    Data_Get_Struct(obj, void, *ptr);
  }
  
  /* Do type-checking if type info was provided */
  if (ty) {
    if (ty->clientdata) {
        if (rb_obj_is_kind_of(obj, ((swig_class *) (ty->clientdata))->klass)) {
          if (*ptr == 0)
            rb_raise(rb_eRuntimeError, "This %s already released", ty->str);
          return 0;
        }
    }
    if ((c = SWIG_MangleStr(obj)) == NULL) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) {
      if (flags & SWIG_POINTER_EXCEPTION)
        rb_raise(rb_eTypeError, "Expected %s", ty->str);
      else
        return -1;
    }
    *ptr = SWIG_TypeCast(tc, *ptr);
  }
  return 0;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Ruby_MustGetPtr(VALUE obj, swig_type_info *ty, int argnum, int flags)
{
  void *result;
  SWIG_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Check convert */
SWIGRUNTIME(int)
SWIG_Ruby_CheckConvert(VALUE obj, swig_type_info *ty)
{
  char *c = SWIG_MangleStr(obj);
  if (!c)
    return 0;
  return SWIG_TypeCheck(c,ty) != 0;
}

SWIGRUNTIME(VALUE)
SWIG_Ruby_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r, ptr, sz);
  strcpy(r, type->name);
  return rb_str_new2(result);
}

/* Convert a packed value value */
SWIGRUNTIME(void)
SWIG_Ruby_ConvertPacked(VALUE obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if (TYPE(obj) != T_STRING) goto type_error;
  c = StringValuePtr(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c, ptr, sz);
  if (ty) {
    tc = SWIG_TypeCheck(c, ty);
    if (!tc) goto type_error;
  }
  return;

type_error:

  if (flags) {
    if (ty) {
      rb_raise(rb_eTypeError, "Type error. Expected %s", ty->name);
    } else {
      rb_raise(rb_eTypeError, "Expected a pointer");
    }
  }
}

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_Schema swig_types[0] 
#define  SWIGTYPE_p_Datum swig_types[1] 
#define  SWIGTYPE_p_IntDatum swig_types[2] 
#define  SWIGTYPE_p_CursorRow swig_types[3] 
#define  SWIGTYPE_p_TypeMap swig_types[4] 
#define  SWIGTYPE_p_Row swig_types[5] 
#define  SWIGTYPE_p_GreenEnv swig_types[6] 
#define  SWIGTYPE_p_p_char swig_types[7] 
#define  SWIGTYPE_p_GreenDb swig_types[8] 
#define  SWIGTYPE_p_StrDatum swig_types[9] 
#define  SWIGTYPE_p_Cursor swig_types[10] 
#define  SWIGTYPE_p_Table swig_types[11] 
#define  SWIGTYPE_p_int swig_types[12] 
static swig_type_info *swig_types[14];

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Init_greendb
#define SWIG_name    "Greendb"

static VALUE mGreendb;

static void SWIG_AsVal(VALUE obj, int *val)
{
    *val = (int) NUM2INT(obj);
}


#include <db_cxx.h>
#include "greendb/greendb.hh"
#include "greendb/datum.hh"
#include "greendb/strdatum.hh"
#include "greendb/greenenv.hh"
#include "greendb/row.hh"
#include "greendb/table.hh"
#include "greendb/cursor.hh"
#include "greendb/typemap.hh"
#include "greendb/schema.hh"


swig_class cGreenDb;
static void free_GreenDb(GreenDb *);

swig_class cGreenEnv;
static void free_GreenEnv(GreenEnv *);

swig_class cDatum;
static void free_Datum(Datum *);

swig_class cStrDatum;
static void free_StrDatum(StrDatum *);

swig_class cIntDatum;
static void free_IntDatum(IntDatum *);

swig_class cCursor;
static void free_Cursor(Cursor *);

swig_class cRow;
static void free_Row(Row *);

swig_class cTable;
static void free_Table(Table *);

swig_class cSchema;
static void free_Schema(Schema *);

swig_class cTypeMap;
static void free_TypeMap(TypeMap *);

swig_class cCursorRow;
static void free_CursorRow(CursorRow *);
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_GreenDb_allocate(VALUE self) {
#else
    static VALUE
    _wrap_GreenDb_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GreenDb);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_GreenDb(int argc, VALUE *argv, VALUE self) {
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    char *arg2 ;
    char *arg3 ;
    GreenDb *result;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_GreenEnv, 1);
    arg2 = StringValuePtr(argv[1]);
    arg3 = StringValuePtr(argv[2]);
    result = (GreenDb *)new GreenDb(arg1,(char const *)arg2,(char const *)arg3);
    DATA_PTR(self) = result;
    return self;
}


static void
free_GreenDb(GreenDb *arg1) {
    delete arg1;
}
static VALUE
_wrap_GreenDb_open(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = NUM2INT(argv[2]);
    (arg1)->open(arg2,arg3,arg4);
    
    return Qnil;
}


static VALUE
_wrap_GreenDb_open_unknown(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    (arg1)->open_unknown();
    
    return Qnil;
}


static VALUE
_wrap_GreenDb_open_queue(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    (arg1)->open_queue();
    
    return Qnil;
}


static VALUE
_wrap_GreenDb_open_recno(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    (arg1)->open_recno();
    
    return Qnil;
}


static VALUE
_wrap_GreenDb_open_hash(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    (arg1)->open_hash();
    
    return Qnil;
}


static VALUE
_wrap_GreenDb_open_btree(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    (arg1)->open_btree();
    
    return Qnil;
}


static VALUE
_wrap_GreenDb_dbfile(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    result = (char *)((GreenDb const *)arg1)->dbfile();
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_GreenDb_name(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    result = (char *)((GreenDb const *)arg1)->name();
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_GreenDb_put(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Datum, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->put(*arg2,*arg3);
    
    return Qnil;
}


static VALUE
_wrap_GreenDb_fetch(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Datum, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (int)(arg1)->fetch(*arg2,*arg3);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_GreenDb_cursor(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    Cursor *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    result = (Cursor *)(arg1)->cursor();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Cursor,0);
    return vresult;
}


static VALUE
_wrap_GreenDb_close(int argc, VALUE *argv, VALUE self) {
    GreenDb *arg1 = (GreenDb *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenDb, 1);
    (arg1)->close();
    
    return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_GreenEnv_allocate(VALUE self) {
#else
    static VALUE
    _wrap_GreenEnv_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_GreenEnv);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_GreenEnv(int argc, VALUE *argv, VALUE self) {
    char *arg1 ;
    GreenEnv *result;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = StringValuePtr(argv[0]);
    result = (GreenEnv *)new GreenEnv((char const *)arg1);
    DATA_PTR(self) = result;
    return self;
}


static void
free_GreenEnv(GreenEnv *arg1) {
    delete arg1;
}
static VALUE
_wrap_GreenEnv_open(int argc, VALUE *argv, VALUE self) {
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenEnv, 1);
    (arg1)->open();
    
    return Qnil;
}


static VALUE
_wrap_GreenEnv_close(int argc, VALUE *argv, VALUE self) {
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenEnv, 1);
    (arg1)->close();
    
    return Qnil;
}


static VALUE
_wrap_GreenEnv_home(int argc, VALUE *argv, VALUE self) {
    GreenEnv *arg1 = (GreenEnv *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_GreenEnv, 1);
    result = (char *)(arg1)->home();
    
    vresult = rb_str_new2(result);
    return vresult;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_Datum_allocate(VALUE self) {
#else
    static VALUE
    _wrap_Datum_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Datum);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_Datum(int argc, VALUE *argv, VALUE self) {
    Datum *result;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (Datum *)new Datum();
    DATA_PTR(self) = result;
    return self;
}


static void
free_Datum(Datum *arg1) {
    delete arg1;
}
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_StrDatum_allocate(VALUE self) {
#else
    static VALUE
    _wrap_StrDatum_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_StrDatum);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_StrDatum(int argc, VALUE *argv, VALUE self) {
    char *arg1 ;
    StrDatum *result;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = StringValuePtr(argv[0]);
    result = (StrDatum *)new StrDatum(arg1);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_StrDatum_type_name(int argc, VALUE *argv, VALUE self) {
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_StrDatum, 1);
    result = (char *)((StrDatum const *)arg1)->type_name();
    
    vresult = rb_str_new2(result);
    return vresult;
}


static void
free_StrDatum(StrDatum *arg1) {
    delete arg1;
}
static VALUE
_wrap_StrDatum_repr(int argc, VALUE *argv, VALUE self) {
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_StrDatum, 1);
    result = (char *)((StrDatum const *)arg1)->repr();
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_StrDatum_value(int argc, VALUE *argv, VALUE self) {
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_StrDatum, 1);
    result = (char *)(arg1)->value();
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_StrDatum_set_value(int argc, VALUE *argv, VALUE self) {
    StrDatum *arg1 = (StrDatum *) 0 ;
    char *arg2 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_StrDatum, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (char *)(arg1)->set_value(arg2);
    
    vresult = rb_str_new2(result);
    return vresult;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_IntDatum_allocate(VALUE self) {
#else
    static VALUE
    _wrap_IntDatum_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_IntDatum);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_IntDatum(int argc, VALUE *argv, VALUE self) {
    int arg1 ;
    IntDatum *result;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    arg1 = NUM2INT(argv[0]);
    result = (IntDatum *)new IntDatum(arg1);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_IntDatum_type_name(int argc, VALUE *argv, VALUE self) {
    IntDatum *arg1 = (IntDatum *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IntDatum, 1);
    result = (char *)((IntDatum const *)arg1)->type_name();
    
    vresult = rb_str_new2(result);
    return vresult;
}


static void
free_IntDatum(IntDatum *arg1) {
    delete arg1;
}
static VALUE
_wrap_IntDatum_repr(int argc, VALUE *argv, VALUE self) {
    IntDatum *arg1 = (IntDatum *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IntDatum, 1);
    result = (char *)((IntDatum const *)arg1)->repr();
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_IntDatum_value(int argc, VALUE *argv, VALUE self) {
    IntDatum *arg1 = (IntDatum *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IntDatum, 1);
    result = (int)(arg1)->value();
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_IntDatum_set_value(int argc, VALUE *argv, VALUE self) {
    IntDatum *arg1 = (IntDatum *) 0 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_IntDatum, 1);
    arg2 = NUM2INT(argv[0]);
    result = (int)(arg1)->set_value(arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static void
free_Cursor(Cursor *arg1) {
    delete arg1;
}
static VALUE
_wrap_Cursor_first(int argc, VALUE *argv, VALUE self) {
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Cursor, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Datum, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (int)(arg1)->first(*arg2,*arg3);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_Cursor_last(int argc, VALUE *argv, VALUE self) {
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Cursor, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Datum, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (int)(arg1)->last(*arg2,*arg3);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_Cursor_find(int argc, VALUE *argv, VALUE self) {
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Cursor, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Datum, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (int)(arg1)->find(*arg2,*arg3);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_Cursor_next(int argc, VALUE *argv, VALUE self) {
    Cursor *arg1 = (Cursor *) 0 ;
    Datum *arg2 = 0 ;
    Datum *arg3 = 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Cursor, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Datum, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (int)(arg1)->next(*arg2,*arg3);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_Cursor_close(int argc, VALUE *argv, VALUE self) {
    Cursor *arg1 = (Cursor *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Cursor, 1);
    (arg1)->close();
    
    return Qnil;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_Row_allocate(VALUE self) {
#else
    static VALUE
    _wrap_Row_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Row);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_Row(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    size_t arg2 ;
    Row *result;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_Table, 1);
    arg2 = NUM2LONG(argv[1]);
    result = (Row *)new Row(arg1,arg2);
    DATA_PTR(self) = result;
    return self;
}


static void
free_Row(Row *arg1) {
    delete arg1;
}
static VALUE
_wrap_Row_close(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    (arg1)->close();
    
    return Qnil;
}


static VALUE
_wrap_Row_getpk(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    Datum *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    {
        Datum &_result_ref = (arg1)->getpk();
        result = (Datum *) &_result_ref;
    }
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum,0);
    return vresult;
}


static VALUE
_wrap_Row_set_n(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *arg3 = 0 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = NUM2INT(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->set(arg2,*arg3);
    
    return Qnil;
}


static VALUE
_wrap_Row_set(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    bool result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (bool)(arg1)->set((char const *)arg2,*arg3);
    
    vresult = result ? Qtrue : Qfalse;
    return vresult;
}


static VALUE
_wrap_Row_from_string_n(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    char *arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = NUM2INT(argv[0]);
    arg3 = StringValuePtr(argv[1]);
    (arg1)->from_string(arg2,(char const *)arg3);
    
    return Qnil;
}


static VALUE
_wrap_Row_from_string(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    char *arg3 ;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = StringValuePtr(argv[0]);
    arg3 = StringValuePtr(argv[1]);
    (arg1)->from_string((char const *)arg2,(char const *)arg3);
    
    return Qnil;
}


static VALUE
_wrap_Row_to_string_n(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = NUM2INT(argv[0]);
    result = (char *)(arg1)->to_string(arg2);
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_Row_to_string(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (char *)(arg1)->to_string((char const *)arg2);
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_Row_get_column_n(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = NUM2INT(argv[0]);
    result = (Datum *)(arg1)->get_column(arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum,0);
    return vresult;
}


static VALUE
_wrap_Row_get_column(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    Datum *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (Datum *)(arg1)->get_column((char const *)arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum,0);
    return vresult;
}


static VALUE
_wrap_Row_get_col_no(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    char *arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (int)(arg1)->get_col_no((char const *)arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_Row_get_existing_column(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    int arg2 ;
    Datum *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    arg2 = NUM2INT(argv[0]);
    result = (Datum *)(arg1)->get_existing_column(arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Datum,0);
    return vresult;
}


static VALUE
_wrap_Row_size(int argc, VALUE *argv, VALUE self) {
    Row *arg1 = (Row *) 0 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Row, 1);
    result = (int)(arg1)->size();
    
    vresult = INT2NUM(result);
    return vresult;
}


#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_Table_allocate(VALUE self) {
#else
    static VALUE
    _wrap_Table_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_Table);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_Table(int argc, VALUE *argv, VALUE self) {
    char *arg1 ;
    GreenEnv *arg2 = 0 ;
    Table *result;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    arg1 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg2, SWIGTYPE_p_GreenEnv, 1); if (arg2 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (Table *)new Table((char const *)arg1,*arg2);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_Table_get_schema(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    Schema *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    result = (Schema *)(arg1)->get_schema();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Schema,0);
    return vresult;
}


static VALUE
_wrap_Table_close(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    (arg1)->close();
    
    return Qnil;
}


static void
free_Table(Table *arg1) {
    delete arg1;
}
static VALUE
_wrap_Table_get_name(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    result = (char *)((Table const *)arg1)->get_name();
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_Table_save(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    Row *arg2 = (Row *) 0 ;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_Row, 1);
    (arg1)->save(arg2);
    
    return Qnil;
}


static VALUE
_wrap_Table_index(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    Datum *arg4 = 0 ;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    arg2 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    SWIG_ConvertPtr(argv[2], (void **) &arg4, SWIGTYPE_p_Datum, 1); if (arg4 == NULL) rb_raise(rb_eTypeError, "null reference");
    (arg1)->index((char const *)arg2,*arg3,*arg4);
    
    return Qnil;
}


static VALUE
_wrap_Table_fetch(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Datum *arg3 = 0 ;
    Row *result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    arg2 = StringValuePtr(argv[0]);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_Datum, 1); if (arg3 == NULL) rb_raise(rb_eTypeError, "null reference");
    result = (Row *)(arg1)->fetch((char const *)arg2,*arg3);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Row,0);
    return vresult;
}


static VALUE
_wrap_Table_new_row(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    Row *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    result = (Row *)(arg1)->new_row();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Row,0);
    return vresult;
}


static VALUE
_wrap_Table_cursor(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    Cursor *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (Cursor *)(arg1)->cursor((char const *)arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Cursor,0);
    return vresult;
}


static VALUE
_wrap_Table_first(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    CursorRow *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (CursorRow *)(arg1)->first((char const *)arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CursorRow,0);
    return vresult;
}


static VALUE
_wrap_Table_last(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    char *arg2 ;
    CursorRow *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (CursorRow *)(arg1)->last((char const *)arg2);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CursorRow,0);
    return vresult;
}


static VALUE
_wrap_Table_next(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    CursorRow *arg2 = (CursorRow *) 0 ;
    char *arg3 ;
    CursorRow *result;
    VALUE vresult = Qnil;
    
    if ((argc < 2) || (argc > 2))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 2)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_CursorRow, 1);
    arg3 = StringValuePtr(argv[1]);
    result = (CursorRow *)(arg1)->next(arg2,(char const *)arg3);
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CursorRow,0);
    return vresult;
}


static VALUE
_wrap_Table_get_col_name(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    int arg2 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Table, 1);
    arg2 = NUM2INT(argv[0]);
    result = (char *)((Table const *)arg1)->get_col_name(arg2);
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_Schema_add_column(int argc, VALUE *argv, VALUE self) {
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int arg3 ;
    bool arg4 ;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Schema, 1);
    arg2 = StringValuePtr(argv[0]);
    arg3 = NUM2INT(argv[1]);
    arg4 = RTEST(argv[2]);
    (arg1)->add_column((char const *)arg2,arg3,arg4);
    
    return Qnil;
}


static VALUE
_wrap_Schema_add_columns(int argc, VALUE *argv, VALUE self) {
    Schema *arg1 = (Schema *) 0 ;
    char **arg2 ;
    int *arg3 ;
    unsigned int arg4 ;
    
    if ((argc < 3) || (argc > 3))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 3)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Schema, 1);
    SWIG_ConvertPtr(argv[0], (void **) &arg2, SWIGTYPE_p_p_char, 1);
    SWIG_ConvertPtr(argv[1], (void **) &arg3, SWIGTYPE_p_int, 1);
    arg4 = NUM2UINT(argv[2]);
    (arg1)->add_columns((char const *(*))arg2,arg3,arg4);
    
    return Qnil;
}


static VALUE
_wrap_Schema_get_type_n(int argc, VALUE *argv, VALUE self) {
    Schema *arg1 = (Schema *) 0 ;
    int arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Schema, 1);
    arg2 = NUM2INT(argv[0]);
    result = (int)((Schema const *)arg1)->get_type(arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_Schema_get_type(int argc, VALUE *argv, VALUE self) {
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Schema, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (int)((Schema const *)arg1)->get_type((char const *)arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_Schema_get_col_no(int argc, VALUE *argv, VALUE self) {
    Schema *arg1 = (Schema *) 0 ;
    char *arg2 ;
    int result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Schema, 1);
    arg2 = StringValuePtr(argv[0]);
    result = (int)((Schema const *)arg1)->get_col_no((char const *)arg2);
    
    vresult = INT2NUM(result);
    return vresult;
}


static VALUE
_wrap_Schema_get_name(int argc, VALUE *argv, VALUE self) {
    Schema *arg1 = (Schema *) 0 ;
    int arg2 ;
    char *result;
    VALUE vresult = Qnil;
    
    if ((argc < 1) || (argc > 1))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 1)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Schema, 1);
    arg2 = NUM2INT(argv[0]);
    result = (char *)((Schema const *)arg1)->get_name(arg2);
    
    vresult = rb_str_new2(result);
    return vresult;
}


static VALUE
_wrap_Schema_size(int argc, VALUE *argv, VALUE self) {
    Schema *arg1 = (Schema *) 0 ;
    size_t result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_Schema, 1);
    result = ((Schema const *)arg1)->size();
    
    vresult = INT2NUM(result);
    return vresult;
}


static void
free_Schema(Schema *arg1) {
    delete arg1;
}
static VALUE
_wrap_TypeMap_get_type_map(int argc, VALUE *argv, VALUE self) {
    TypeMap *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    result = (TypeMap *)TypeMap::get_type_map();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TypeMap,0);
    return vresult;
}


static void
free_TypeMap(TypeMap *arg1) {
    delete arg1;
}
#ifdef HAVE_RB_DEFINE_ALLOC_FUNC
static VALUE
_wrap_CursorRow_allocate(VALUE self) {
#else
    static VALUE
    _wrap_CursorRow_allocate(int argc, VALUE *argv, VALUE self) {
#endif
        
        
        VALUE vresult = SWIG_NewClassInstance(self, SWIGTYPE_p_CursorRow);
#ifndef HAVE_RB_DEFINE_ALLOC_FUNC
        rb_obj_call_init(vresult, argc, argv);
#endif
        return vresult;
    }
    

static VALUE
_wrap_new_CursorRow(int argc, VALUE *argv, VALUE self) {
    Table *arg1 = (Table *) 0 ;
    size_t arg2 ;
    Cursor *arg3 = (Cursor *) 0 ;
    char *arg4 ;
    Datum *arg5 = (Datum *) 0 ;
    CursorRow *result;
    
    if ((argc < 5) || (argc > 5))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 5)",argc);
    SWIG_ConvertPtr(argv[0], (void **) &arg1, SWIGTYPE_p_Table, 1);
    arg2 = NUM2LONG(argv[1]);
    SWIG_ConvertPtr(argv[2], (void **) &arg3, SWIGTYPE_p_Cursor, 1);
    arg4 = StringValuePtr(argv[3]);
    SWIG_ConvertPtr(argv[4], (void **) &arg5, SWIGTYPE_p_Datum, 1);
    result = (CursorRow *)new CursorRow(arg1,arg2,arg3,(char const *)arg4,arg5);
    DATA_PTR(self) = result;
    return self;
}


static VALUE
_wrap_CursorRow_get_cursor(int argc, VALUE *argv, VALUE self) {
    CursorRow *arg1 = (CursorRow *) 0 ;
    Cursor *result;
    VALUE vresult = Qnil;
    
    if ((argc < 0) || (argc > 0))
    rb_raise(rb_eArgError, "wrong # of arguments(%d for 0)",argc);
    SWIG_ConvertPtr(self, (void **) &arg1, SWIGTYPE_p_CursorRow, 1);
    result = (Cursor *)(arg1)->get_cursor();
    
    vresult = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Cursor,0);
    return vresult;
}


static void
free_CursorRow(CursorRow *arg1) {
    delete arg1;
}

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CursorRowTo_p_Row(void *x) {
    return (void *)((Row *)  ((CursorRow *) x));
}
static void *_p_IntDatumTo_p_Datum(void *x) {
    return (void *)((Datum *)  ((IntDatum *) x));
}
static void *_p_StrDatumTo_p_Datum(void *x) {
    return (void *)((Datum *)  ((StrDatum *) x));
}
static swig_type_info _swigt__p_Schema[] = {{"_p_Schema", 0, "Schema *", 0, 0, 0, 0},{"_p_Schema", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Datum[] = {{"_p_Datum", 0, "Datum *", 0, 0, 0, 0},{"_p_Datum", 0, 0, 0, 0, 0, 0},{"_p_IntDatum", _p_IntDatumTo_p_Datum, 0, 0, 0, 0, 0},{"_p_StrDatum", _p_StrDatumTo_p_Datum, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_IntDatum[] = {{"_p_IntDatum", 0, "IntDatum *", 0, 0, 0, 0},{"_p_IntDatum", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_CursorRow[] = {{"_p_CursorRow", 0, "CursorRow *", 0, 0, 0, 0},{"_p_CursorRow", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_TypeMap[] = {{"_p_TypeMap", 0, "TypeMap *", 0, 0, 0, 0},{"_p_TypeMap", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Row[] = {{"_p_Row", 0, "Row *", 0, 0, 0, 0},{"_p_CursorRow", _p_CursorRowTo_p_Row, 0, 0, 0, 0, 0},{"_p_Row", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_GreenEnv[] = {{"_p_GreenEnv", 0, "GreenEnv *", 0, 0, 0, 0},{"_p_GreenEnv", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0, 0, 0, 0},{"_p_p_char", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_GreenDb[] = {{"_p_GreenDb", 0, "GreenDb *", 0, 0, 0, 0},{"_p_GreenDb", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_StrDatum[] = {{"_p_StrDatum", 0, "StrDatum *", 0, 0, 0, 0},{"_p_StrDatum", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Cursor[] = {{"_p_Cursor", 0, "Cursor *", 0, 0, 0, 0},{"_p_Cursor", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_Table[] = {{"_p_Table", 0, "Table *", 0, 0, 0, 0},{"_p_Table", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0, 0, 0, 0},{"_p_int", 0, 0, 0, 0, 0, 0},{0, 0, 0, 0, 0, 0, 0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_Schema, 
_swigt__p_Datum, 
_swigt__p_IntDatum, 
_swigt__p_CursorRow, 
_swigt__p_TypeMap, 
_swigt__p_Row, 
_swigt__p_GreenEnv, 
_swigt__p_p_char, 
_swigt__p_GreenDb, 
_swigt__p_StrDatum, 
_swigt__p_Cursor, 
_swigt__p_Table, 
_swigt__p_int, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) Init_greendb(void) {
    int i;
    
    SWIG_InitRuntime();
    mGreendb = rb_define_module("Greendb");
    
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        SWIG_define_class(swig_types[i]);
    }
    
    
    cGreenDb.klass = rb_define_class_under(mGreendb, "GreenDb", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_GreenDb, (void *) &cGreenDb);
    rb_define_alloc_func(cGreenDb.klass, _wrap_GreenDb_allocate);
    rb_define_method(cGreenDb.klass, "initialize", VALUEFUNC(_wrap_new_GreenDb), -1);
    rb_define_method(cGreenDb.klass, "open", VALUEFUNC(_wrap_GreenDb_open), -1);
    rb_define_method(cGreenDb.klass, "open_unknown", VALUEFUNC(_wrap_GreenDb_open_unknown), -1);
    rb_define_method(cGreenDb.klass, "open_queue", VALUEFUNC(_wrap_GreenDb_open_queue), -1);
    rb_define_method(cGreenDb.klass, "open_recno", VALUEFUNC(_wrap_GreenDb_open_recno), -1);
    rb_define_method(cGreenDb.klass, "open_hash", VALUEFUNC(_wrap_GreenDb_open_hash), -1);
    rb_define_method(cGreenDb.klass, "open_btree", VALUEFUNC(_wrap_GreenDb_open_btree), -1);
    rb_define_method(cGreenDb.klass, "dbfile", VALUEFUNC(_wrap_GreenDb_dbfile), -1);
    rb_define_method(cGreenDb.klass, "name", VALUEFUNC(_wrap_GreenDb_name), -1);
    rb_define_method(cGreenDb.klass, "put", VALUEFUNC(_wrap_GreenDb_put), -1);
    rb_define_method(cGreenDb.klass, "fetch", VALUEFUNC(_wrap_GreenDb_fetch), -1);
    rb_define_method(cGreenDb.klass, "cursor", VALUEFUNC(_wrap_GreenDb_cursor), -1);
    rb_define_method(cGreenDb.klass, "close", VALUEFUNC(_wrap_GreenDb_close), -1);
    cGreenDb.mark = 0;
    cGreenDb.destroy = (void (*)(void *)) free_GreenDb;
    
    cGreenEnv.klass = rb_define_class_under(mGreendb, "GreenEnv", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_GreenEnv, (void *) &cGreenEnv);
    rb_define_alloc_func(cGreenEnv.klass, _wrap_GreenEnv_allocate);
    rb_define_method(cGreenEnv.klass, "initialize", VALUEFUNC(_wrap_new_GreenEnv), -1);
    rb_define_method(cGreenEnv.klass, "open", VALUEFUNC(_wrap_GreenEnv_open), -1);
    rb_define_method(cGreenEnv.klass, "close", VALUEFUNC(_wrap_GreenEnv_close), -1);
    rb_define_method(cGreenEnv.klass, "home", VALUEFUNC(_wrap_GreenEnv_home), -1);
    cGreenEnv.mark = 0;
    cGreenEnv.destroy = (void (*)(void *)) free_GreenEnv;
    
    cDatum.klass = rb_define_class_under(mGreendb, "Datum", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_Datum, (void *) &cDatum);
    rb_define_alloc_func(cDatum.klass, _wrap_Datum_allocate);
    rb_define_method(cDatum.klass, "initialize", VALUEFUNC(_wrap_new_Datum), -1);
    cDatum.mark = 0;
    cDatum.destroy = (void (*)(void *)) free_Datum;
    
    cStrDatum.klass = rb_define_class_under(mGreendb, "StrDatum", ((swig_class *) SWIGTYPE_p_Datum->clientdata)->klass);
    SWIG_TypeClientData(SWIGTYPE_p_StrDatum, (void *) &cStrDatum);
    rb_define_alloc_func(cStrDatum.klass, _wrap_StrDatum_allocate);
    rb_define_method(cStrDatum.klass, "initialize", VALUEFUNC(_wrap_new_StrDatum), -1);
    rb_define_method(cStrDatum.klass, "type_name", VALUEFUNC(_wrap_StrDatum_type_name), -1);
    rb_define_method(cStrDatum.klass, "repr", VALUEFUNC(_wrap_StrDatum_repr), -1);
    rb_define_method(cStrDatum.klass, "value", VALUEFUNC(_wrap_StrDatum_value), -1);
    rb_define_method(cStrDatum.klass, "set_value", VALUEFUNC(_wrap_StrDatum_set_value), -1);
    cStrDatum.mark = 0;
    cStrDatum.destroy = (void (*)(void *)) free_StrDatum;
    
    cIntDatum.klass = rb_define_class_under(mGreendb, "IntDatum", ((swig_class *) SWIGTYPE_p_Datum->clientdata)->klass);
    SWIG_TypeClientData(SWIGTYPE_p_IntDatum, (void *) &cIntDatum);
    rb_define_alloc_func(cIntDatum.klass, _wrap_IntDatum_allocate);
    rb_define_method(cIntDatum.klass, "initialize", VALUEFUNC(_wrap_new_IntDatum), -1);
    rb_define_method(cIntDatum.klass, "type_name", VALUEFUNC(_wrap_IntDatum_type_name), -1);
    rb_define_method(cIntDatum.klass, "repr", VALUEFUNC(_wrap_IntDatum_repr), -1);
    rb_define_method(cIntDatum.klass, "value", VALUEFUNC(_wrap_IntDatum_value), -1);
    rb_define_method(cIntDatum.klass, "set_value", VALUEFUNC(_wrap_IntDatum_set_value), -1);
    cIntDatum.mark = 0;
    cIntDatum.destroy = (void (*)(void *)) free_IntDatum;
    
    cCursor.klass = rb_define_class_under(mGreendb, "Cursor", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_Cursor, (void *) &cCursor);
    rb_undef_alloc_func(cCursor.klass);
    rb_define_method(cCursor.klass, "first", VALUEFUNC(_wrap_Cursor_first), -1);
    rb_define_method(cCursor.klass, "last", VALUEFUNC(_wrap_Cursor_last), -1);
    rb_define_method(cCursor.klass, "find", VALUEFUNC(_wrap_Cursor_find), -1);
    rb_define_method(cCursor.klass, "next", VALUEFUNC(_wrap_Cursor_next), -1);
    rb_define_method(cCursor.klass, "close", VALUEFUNC(_wrap_Cursor_close), -1);
    cCursor.mark = 0;
    cCursor.destroy = (void (*)(void *)) free_Cursor;
    
    cRow.klass = rb_define_class_under(mGreendb, "Row", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_Row, (void *) &cRow);
    rb_define_alloc_func(cRow.klass, _wrap_Row_allocate);
    rb_define_method(cRow.klass, "initialize", VALUEFUNC(_wrap_new_Row), -1);
    rb_define_method(cRow.klass, "close", VALUEFUNC(_wrap_Row_close), -1);
    rb_define_method(cRow.klass, "getpk", VALUEFUNC(_wrap_Row_getpk), -1);
    rb_define_method(cRow.klass, "set_n", VALUEFUNC(_wrap_Row_set_n), -1);
    rb_define_method(cRow.klass, "set", VALUEFUNC(_wrap_Row_set), -1);
    rb_define_method(cRow.klass, "from_string_n", VALUEFUNC(_wrap_Row_from_string_n), -1);
    rb_define_method(cRow.klass, "from_string", VALUEFUNC(_wrap_Row_from_string), -1);
    rb_define_method(cRow.klass, "to_string_n", VALUEFUNC(_wrap_Row_to_string_n), -1);
    rb_define_method(cRow.klass, "to_string", VALUEFUNC(_wrap_Row_to_string), -1);
    rb_define_method(cRow.klass, "get_column_n", VALUEFUNC(_wrap_Row_get_column_n), -1);
    rb_define_method(cRow.klass, "get_column", VALUEFUNC(_wrap_Row_get_column), -1);
    rb_define_method(cRow.klass, "get_col_no", VALUEFUNC(_wrap_Row_get_col_no), -1);
    rb_define_method(cRow.klass, "get_existing_column", VALUEFUNC(_wrap_Row_get_existing_column), -1);
    rb_define_method(cRow.klass, "size", VALUEFUNC(_wrap_Row_size), -1);
    cRow.mark = 0;
    cRow.destroy = (void (*)(void *)) free_Row;
    
    cTable.klass = rb_define_class_under(mGreendb, "Table", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_Table, (void *) &cTable);
    rb_define_alloc_func(cTable.klass, _wrap_Table_allocate);
    rb_define_method(cTable.klass, "initialize", VALUEFUNC(_wrap_new_Table), -1);
    rb_define_method(cTable.klass, "get_schema", VALUEFUNC(_wrap_Table_get_schema), -1);
    rb_define_method(cTable.klass, "close", VALUEFUNC(_wrap_Table_close), -1);
    rb_define_method(cTable.klass, "get_name", VALUEFUNC(_wrap_Table_get_name), -1);
    rb_define_method(cTable.klass, "save", VALUEFUNC(_wrap_Table_save), -1);
    rb_define_method(cTable.klass, "index", VALUEFUNC(_wrap_Table_index), -1);
    rb_define_method(cTable.klass, "fetch", VALUEFUNC(_wrap_Table_fetch), -1);
    rb_define_method(cTable.klass, "new_row", VALUEFUNC(_wrap_Table_new_row), -1);
    rb_define_method(cTable.klass, "cursor", VALUEFUNC(_wrap_Table_cursor), -1);
    rb_define_method(cTable.klass, "first", VALUEFUNC(_wrap_Table_first), -1);
    rb_define_method(cTable.klass, "last", VALUEFUNC(_wrap_Table_last), -1);
    rb_define_method(cTable.klass, "next", VALUEFUNC(_wrap_Table_next), -1);
    rb_define_method(cTable.klass, "get_col_name", VALUEFUNC(_wrap_Table_get_col_name), -1);
    cTable.mark = 0;
    cTable.destroy = (void (*)(void *)) free_Table;
    
    cSchema.klass = rb_define_class_under(mGreendb, "Schema", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_Schema, (void *) &cSchema);
    rb_undef_alloc_func(cSchema.klass);
    rb_define_method(cSchema.klass, "add_column", VALUEFUNC(_wrap_Schema_add_column), -1);
    rb_define_method(cSchema.klass, "add_columns", VALUEFUNC(_wrap_Schema_add_columns), -1);
    rb_define_method(cSchema.klass, "get_type_n", VALUEFUNC(_wrap_Schema_get_type_n), -1);
    rb_define_method(cSchema.klass, "get_type", VALUEFUNC(_wrap_Schema_get_type), -1);
    rb_define_method(cSchema.klass, "get_col_no", VALUEFUNC(_wrap_Schema_get_col_no), -1);
    rb_define_method(cSchema.klass, "get_name", VALUEFUNC(_wrap_Schema_get_name), -1);
    rb_define_method(cSchema.klass, "size", VALUEFUNC(_wrap_Schema_size), -1);
    cSchema.mark = 0;
    cSchema.destroy = (void (*)(void *)) free_Schema;
    
    cTypeMap.klass = rb_define_class_under(mGreendb, "TypeMap", rb_cObject);
    SWIG_TypeClientData(SWIGTYPE_p_TypeMap, (void *) &cTypeMap);
    rb_undef_alloc_func(cTypeMap.klass);
    rb_define_singleton_method(cTypeMap.klass, "get_type_map", VALUEFUNC(_wrap_TypeMap_get_type_map), -1);
    rb_define_const(cTypeMap.klass,"UNDEFINED", INT2NUM(TypeMap::UNDEFINED));
    rb_define_const(cTypeMap.klass,"USER", INT2NUM(TypeMap::USER));
    rb_define_const(cTypeMap.klass,"STRING", INT2NUM(TypeMap::STRING));
    rb_define_const(cTypeMap.klass,"WSTRING", INT2NUM(TypeMap::WSTRING));
    rb_define_const(cTypeMap.klass,"INT", INT2NUM(TypeMap::INT));
    rb_define_const(cTypeMap.klass,"SHORT", INT2NUM(TypeMap::SHORT));
    rb_define_const(cTypeMap.klass,"LONG", INT2NUM(TypeMap::LONG));
    rb_define_const(cTypeMap.klass,"DOUBLE", INT2NUM(TypeMap::DOUBLE));
    rb_define_const(cTypeMap.klass,"UINT", INT2NUM(TypeMap::UINT));
    rb_define_const(cTypeMap.klass,"USHORT", INT2NUM(TypeMap::USHORT));
    rb_define_const(cTypeMap.klass,"ULONG", INT2NUM(TypeMap::ULONG));
    rb_define_const(cTypeMap.klass,"CHAR", INT2NUM(TypeMap::CHAR));
    rb_define_const(cTypeMap.klass,"WCHAR", INT2NUM(TypeMap::WCHAR));
    rb_define_const(cTypeMap.klass,"BOOL", INT2NUM(TypeMap::BOOL));
    cTypeMap.mark = 0;
    cTypeMap.destroy = (void (*)(void *)) free_TypeMap;
    
    cCursorRow.klass = rb_define_class_under(mGreendb, "CursorRow", ((swig_class *) SWIGTYPE_p_Row->clientdata)->klass);
    SWIG_TypeClientData(SWIGTYPE_p_CursorRow, (void *) &cCursorRow);
    rb_define_alloc_func(cCursorRow.klass, _wrap_CursorRow_allocate);
    rb_define_method(cCursorRow.klass, "initialize", VALUEFUNC(_wrap_new_CursorRow), -1);
    rb_define_method(cCursorRow.klass, "get_cursor", VALUEFUNC(_wrap_CursorRow_get_cursor), -1);
    cCursorRow.mark = 0;
    cCursorRow.destroy = (void (*)(void *)) free_CursorRow;
}

